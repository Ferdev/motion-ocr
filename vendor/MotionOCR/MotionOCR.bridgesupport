<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='BBUFFER' type='{ByteBuffer=&quot;nalloc&quot;i&quot;n&quot;i&quot;nwritten&quot;i&quot;array&quot;*}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nwritten' declared_type='l_int32' type='i'/>
<field name='array' declared_type='l_uint8*' type='*'/>
</struct>
<struct name='BMP_FH' type='{BMP_FileHeader=&quot;bfType&quot;s&quot;bfSize&quot;s&quot;bfFill1&quot;s&quot;bfReserved1&quot;s&quot;bfReserved2&quot;s&quot;bfOffBits&quot;s&quot;bfFill2&quot;s}'>
<field name='bfType' declared_type='l_int16' type='s'/>
<field name='bfSize' declared_type='l_int16' type='s'/>
<field name='bfFill1' declared_type='l_int16' type='s'/>
<field name='bfReserved1' declared_type='l_int16' type='s'/>
<field name='bfReserved2' declared_type='l_int16' type='s'/>
<field name='bfOffBits' declared_type='l_int16' type='s'/>
<field name='bfFill2' declared_type='l_int16' type='s'/>
</struct>
<struct name='BMP_FileHeader' type='{BMP_FileHeader=&quot;bfType&quot;s&quot;bfSize&quot;s&quot;bfFill1&quot;s&quot;bfReserved1&quot;s&quot;bfReserved2&quot;s&quot;bfOffBits&quot;s&quot;bfFill2&quot;s}'>
<field name='bfType' declared_type='l_int16' type='s'/>
<field name='bfSize' declared_type='l_int16' type='s'/>
<field name='bfFill1' declared_type='l_int16' type='s'/>
<field name='bfReserved1' declared_type='l_int16' type='s'/>
<field name='bfReserved2' declared_type='l_int16' type='s'/>
<field name='bfOffBits' declared_type='l_int16' type='s'/>
<field name='bfFill2' declared_type='l_int16' type='s'/>
</struct>
<struct name='BMP_IH' type='{BMP_InfoHeader=&quot;biSize&quot;i&quot;biWidth&quot;i&quot;biHeight&quot;i&quot;biPlanes&quot;s&quot;biBitCount&quot;s&quot;biCompression&quot;i&quot;biSizeImage&quot;i&quot;biXPelsPerMeter&quot;i&quot;biYPelsPerMeter&quot;i&quot;biClrUsed&quot;i&quot;biClrImportant&quot;i}'>
<field name='biSize' declared_type='l_int32' type='i'/>
<field name='biWidth' declared_type='l_int32' type='i'/>
<field name='biHeight' declared_type='l_int32' type='i'/>
<field name='biPlanes' declared_type='l_int16' type='s'/>
<field name='biBitCount' declared_type='l_int16' type='s'/>
<field name='biCompression' declared_type='l_int32' type='i'/>
<field name='biSizeImage' declared_type='l_int32' type='i'/>
<field name='biXPelsPerMeter' declared_type='l_int32' type='i'/>
<field name='biYPelsPerMeter' declared_type='l_int32' type='i'/>
<field name='biClrUsed' declared_type='l_int32' type='i'/>
<field name='biClrImportant' declared_type='l_int32' type='i'/>
</struct>
<struct name='BMP_InfoHeader' type='{BMP_InfoHeader=&quot;biSize&quot;i&quot;biWidth&quot;i&quot;biHeight&quot;i&quot;biPlanes&quot;s&quot;biBitCount&quot;s&quot;biCompression&quot;i&quot;biSizeImage&quot;i&quot;biXPelsPerMeter&quot;i&quot;biYPelsPerMeter&quot;i&quot;biClrUsed&quot;i&quot;biClrImportant&quot;i}'>
<field name='biSize' declared_type='l_int32' type='i'/>
<field name='biWidth' declared_type='l_int32' type='i'/>
<field name='biHeight' declared_type='l_int32' type='i'/>
<field name='biPlanes' declared_type='l_int16' type='s'/>
<field name='biBitCount' declared_type='l_int16' type='s'/>
<field name='biCompression' declared_type='l_int32' type='i'/>
<field name='biSizeImage' declared_type='l_int32' type='i'/>
<field name='biXPelsPerMeter' declared_type='l_int32' type='i'/>
<field name='biYPelsPerMeter' declared_type='l_int32' type='i'/>
<field name='biClrUsed' declared_type='l_int32' type='i'/>
<field name='biClrImportant' declared_type='l_int32' type='i'/>
</struct>
<struct name='BOX' type='{Box=&quot;x&quot;i&quot;y&quot;i&quot;w&quot;i&quot;h&quot;i&quot;refcount&quot;I}'>
<field name='x' declared_type='l_int32' type='i'/>
<field name='y' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
</struct>
<struct name='BOXA' type='{Boxa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;box&quot;^^{Box}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='box' declared_type='struct Box**' type='^^{Box}'/>
</struct>
<struct name='BOXAA' type='{Boxaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;boxa&quot;^^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='boxa' declared_type='struct Boxa**' type='^^{Boxa}'/>
</struct>
<struct name='Box' type='{Box=&quot;x&quot;i&quot;y&quot;i&quot;w&quot;i&quot;h&quot;i&quot;refcount&quot;I}'>
<field name='x' declared_type='l_int32' type='i'/>
<field name='y' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
</struct>
<struct name='Boxa' type='{Boxa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;box&quot;^^{Box}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='box' declared_type='struct Box**' type='^^{Box}'/>
</struct>
<struct name='Boxaa' type='{Boxaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;boxa&quot;^^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='boxa' declared_type='struct Boxa**' type='^^{Boxa}'/>
</struct>
<struct name='ByteBuffer' type='{ByteBuffer=&quot;nalloc&quot;i&quot;n&quot;i&quot;nwritten&quot;i&quot;array&quot;*}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nwritten' declared_type='l_int32' type='i'/>
<field name='array' declared_type='l_uint8*' type='*'/>
</struct>
<struct name='CCBORD' type='{CCBord=&quot;pix&quot;^{Pix}&quot;boxa&quot;^{Boxa}&quot;start&quot;^{Pta}&quot;refcount&quot;i&quot;local&quot;^{Ptaa}&quot;global&quot;^{Ptaa}&quot;step&quot;^{Numaa}&quot;splocal&quot;^{Pta}&quot;spglobal&quot;^{Pta}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
<field name='start' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='local' declared_type='struct Ptaa*' type='^{Ptaa=ii^^{Pta}}'/>
<field name='global' declared_type='struct Ptaa*' type='^{Ptaa=ii^^{Pta}}'/>
<field name='step' declared_type='struct Numaa*' type='^{Numaa=ii^^{Numa}}'/>
<field name='splocal' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='spglobal' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='CCBORDA' type='{CCBorda=&quot;pix&quot;^{Pix}&quot;w&quot;i&quot;h&quot;i&quot;n&quot;i&quot;nalloc&quot;i&quot;ccb&quot;^^{CCBord}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='ccb' declared_type='struct CCBord**' type='^^{CCBord}'/>
</struct>
<struct name='CCBord' type='{CCBord=&quot;pix&quot;^{Pix}&quot;boxa&quot;^{Boxa}&quot;start&quot;^{Pta}&quot;refcount&quot;i&quot;local&quot;^{Ptaa}&quot;global&quot;^{Ptaa}&quot;step&quot;^{Numaa}&quot;splocal&quot;^{Pta}&quot;spglobal&quot;^{Pta}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
<field name='start' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='local' declared_type='struct Ptaa*' type='^{Ptaa=ii^^{Pta}}'/>
<field name='global' declared_type='struct Ptaa*' type='^{Ptaa=ii^^{Pta}}'/>
<field name='step' declared_type='struct Numaa*' type='^{Numaa=ii^^{Numa}}'/>
<field name='splocal' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='spglobal' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='CCBorda' type='{CCBorda=&quot;pix&quot;^{Pix}&quot;w&quot;i&quot;h&quot;i&quot;n&quot;i&quot;nalloc&quot;i&quot;ccb&quot;^^{CCBord}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='ccb' declared_type='struct CCBord**' type='^^{CCBord}'/>
</struct>
<struct name='DLLIST' type='{DoubleLinkedList=&quot;prev&quot;^{DoubleLinkedList}&quot;next&quot;^{DoubleLinkedList}&quot;data&quot;^v}'>
<field name='prev' declared_type='struct DoubleLinkedList*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field name='next' declared_type='struct DoubleLinkedList*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field name='data' declared_type='void*' type='^v'/>
</struct>
<struct name='DPIX' type='{DPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^d}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='wpl' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float64*' type='^d'/>
</struct>
<struct name='DPix' type='{DPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^d}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='wpl' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float64*' type='^d'/>
</struct>
<struct name='DoubleLinkedList' type='{DoubleLinkedList=&quot;prev&quot;^{DoubleLinkedList}&quot;next&quot;^{DoubleLinkedList}&quot;data&quot;^v}'>
<field name='prev' declared_type='struct DoubleLinkedList*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field name='next' declared_type='struct DoubleLinkedList*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<field name='data' declared_type='void*' type='^v'/>
</struct>
<struct name='ESTRIP_DESC' type='{_ESTRIP_DESC=&quot;x_size&quot;s&quot;y_size&quot;s&quot;strip_size&quot;s&quot;resolution&quot;s&quot;data&quot;[8C]}'>
<field name='x_size' declared_type='inT16' type='s'/>
<field name='y_size' declared_type='inT16' type='s'/>
<field name='strip_size' declared_type='inT16' type='s'/>
<field name='resolution' declared_type='inT16' type='s'/>
<field name='data' declared_type='uinT8*' type='[8C]'/>
</struct>
<struct name='FPIX' type='{FPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^f}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='wpl' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='FPIXA' type='{FPixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;fpix&quot;^^{FPix}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='fpix' declared_type='struct FPix**' type='^^{FPix}'/>
</struct>
<struct name='FPix' type='{FPix=&quot;w&quot;i&quot;h&quot;i&quot;wpl&quot;i&quot;refcount&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;data&quot;^f}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='wpl' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='FPixa' type='{FPixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;fpix&quot;^^{FPix}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='fpix' declared_type='struct FPix**' type='^^{FPix}'/>
</struct>
<struct name='GPLOT' type='{GPlot=&quot;rootname&quot;*&quot;cmdname&quot;*&quot;cmddata&quot;^{Sarray}&quot;datanames&quot;^{Sarray}&quot;plotdata&quot;^{Sarray}&quot;plottitles&quot;^{Sarray}&quot;plotstyles&quot;^{Numa}&quot;nplots&quot;i&quot;outname&quot;*&quot;outformat&quot;i&quot;scaling&quot;i&quot;title&quot;*&quot;xlabel&quot;*&quot;ylabel&quot;*}'>
<field name='rootname' declared_type='char*' type='*'/>
<field name='cmdname' declared_type='char*' type='*'/>
<field name='cmddata' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='datanames' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plotdata' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plottitles' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plotstyles' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nplots' declared_type='l_int32' type='i'/>
<field name='outname' declared_type='char*' type='*'/>
<field name='outformat' declared_type='l_int32' type='i'/>
<field name='scaling' declared_type='l_int32' type='i'/>
<field name='title' declared_type='char*' type='*'/>
<field name='xlabel' declared_type='char*' type='*'/>
<field name='ylabel' declared_type='char*' type='*'/>
</struct>
<struct name='GPlot' type='{GPlot=&quot;rootname&quot;*&quot;cmdname&quot;*&quot;cmddata&quot;^{Sarray}&quot;datanames&quot;^{Sarray}&quot;plotdata&quot;^{Sarray}&quot;plottitles&quot;^{Sarray}&quot;plotstyles&quot;^{Numa}&quot;nplots&quot;i&quot;outname&quot;*&quot;outformat&quot;i&quot;scaling&quot;i&quot;title&quot;*&quot;xlabel&quot;*&quot;ylabel&quot;*}'>
<field name='rootname' declared_type='char*' type='*'/>
<field name='cmdname' declared_type='char*' type='*'/>
<field name='cmddata' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='datanames' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plotdata' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plottitles' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='plotstyles' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nplots' declared_type='l_int32' type='i'/>
<field name='outname' declared_type='char*' type='*'/>
<field name='outformat' declared_type='l_int32' type='i'/>
<field name='scaling' declared_type='l_int32' type='i'/>
<field name='title' declared_type='char*' type='*'/>
<field name='xlabel' declared_type='char*' type='*'/>
<field name='ylabel' declared_type='char*' type='*'/>
</struct>
<struct name='JBCLASSER' type='{JbClasser=&quot;safiles&quot;^{Sarray}&quot;method&quot;i&quot;components&quot;i&quot;maxwidth&quot;i&quot;maxheight&quot;i&quot;npages&quot;i&quot;baseindex&quot;i&quot;nacomps&quot;^{Numa}&quot;sizehaus&quot;i&quot;rankhaus&quot;f&quot;thresh&quot;f&quot;weightfactor&quot;f&quot;naarea&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;keep_pixaa&quot;i&quot;pixaa&quot;^{Pixaa}&quot;pixat&quot;^{Pixa}&quot;pixatd&quot;^{Pixa}&quot;nahash&quot;^{NumaHash}&quot;nafgt&quot;^{Numa}&quot;ptac&quot;^{Pta}&quot;ptact&quot;^{Pta}&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}&quot;ptall&quot;^{Pta}}'>
<field name='safiles' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='method' declared_type='l_int32' type='i'/>
<field name='components' declared_type='l_int32' type='i'/>
<field name='maxwidth' declared_type='l_int32' type='i'/>
<field name='maxheight' declared_type='l_int32' type='i'/>
<field name='npages' declared_type='l_int32' type='i'/>
<field name='baseindex' declared_type='l_int32' type='i'/>
<field name='nacomps' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='sizehaus' declared_type='l_int32' type='i'/>
<field name='rankhaus' declared_type='l_float32' type='f'/>
<field name='thresh' declared_type='l_float32' type='f'/>
<field name='weightfactor' declared_type='l_float32' type='f'/>
<field name='naarea' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='nclass' declared_type='l_int32' type='i'/>
<field name='keep_pixaa' declared_type='l_int32' type='i'/>
<field name='pixaa' declared_type='struct Pixaa*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<field name='pixat' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='pixatd' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='nahash' declared_type='struct NumaHash*' type='^{NumaHash=ii^^{Numa}}'/>
<field name='nafgt' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptac' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='ptact' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='naclass' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='napage' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptaul' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='ptall' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='JBDATA' type='{JbData=&quot;pix&quot;^{Pix}&quot;npages&quot;i&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;latticew&quot;i&quot;latticeh&quot;i&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='npages' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='nclass' declared_type='l_int32' type='i'/>
<field name='latticew' declared_type='l_int32' type='i'/>
<field name='latticeh' declared_type='l_int32' type='i'/>
<field name='naclass' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='napage' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptaul' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='JbClasser' type='{JbClasser=&quot;safiles&quot;^{Sarray}&quot;method&quot;i&quot;components&quot;i&quot;maxwidth&quot;i&quot;maxheight&quot;i&quot;npages&quot;i&quot;baseindex&quot;i&quot;nacomps&quot;^{Numa}&quot;sizehaus&quot;i&quot;rankhaus&quot;f&quot;thresh&quot;f&quot;weightfactor&quot;f&quot;naarea&quot;^{Numa}&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;keep_pixaa&quot;i&quot;pixaa&quot;^{Pixaa}&quot;pixat&quot;^{Pixa}&quot;pixatd&quot;^{Pixa}&quot;nahash&quot;^{NumaHash}&quot;nafgt&quot;^{Numa}&quot;ptac&quot;^{Pta}&quot;ptact&quot;^{Pta}&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}&quot;ptall&quot;^{Pta}}'>
<field name='safiles' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='method' declared_type='l_int32' type='i'/>
<field name='components' declared_type='l_int32' type='i'/>
<field name='maxwidth' declared_type='l_int32' type='i'/>
<field name='maxheight' declared_type='l_int32' type='i'/>
<field name='npages' declared_type='l_int32' type='i'/>
<field name='baseindex' declared_type='l_int32' type='i'/>
<field name='nacomps' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='sizehaus' declared_type='l_int32' type='i'/>
<field name='rankhaus' declared_type='l_float32' type='f'/>
<field name='thresh' declared_type='l_float32' type='f'/>
<field name='weightfactor' declared_type='l_float32' type='f'/>
<field name='naarea' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='nclass' declared_type='l_int32' type='i'/>
<field name='keep_pixaa' declared_type='l_int32' type='i'/>
<field name='pixaa' declared_type='struct Pixaa*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<field name='pixat' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='pixatd' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='nahash' declared_type='struct NumaHash*' type='^{NumaHash=ii^^{Numa}}'/>
<field name='nafgt' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptac' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='ptact' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='naclass' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='napage' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptaul' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='ptall' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='JbData' type='{JbData=&quot;pix&quot;^{Pix}&quot;npages&quot;i&quot;w&quot;i&quot;h&quot;i&quot;nclass&quot;i&quot;latticew&quot;i&quot;latticeh&quot;i&quot;naclass&quot;^{Numa}&quot;napage&quot;^{Numa}&quot;ptaul&quot;^{Pta}}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='npages' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='nclass' declared_type='l_int32' type='i'/>
<field name='latticew' declared_type='l_int32' type='i'/>
<field name='latticeh' declared_type='l_int32' type='i'/>
<field name='naclass' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='napage' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='ptaul' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
</struct>
<struct name='L_BMF' type='{L_Bmf=&quot;pixa&quot;^{Pixa}&quot;size&quot;i&quot;directory&quot;*&quot;baseline1&quot;i&quot;baseline2&quot;i&quot;baseline3&quot;i&quot;lineheight&quot;i&quot;kernwidth&quot;i&quot;spacewidth&quot;i&quot;vertlinesep&quot;i&quot;fonttab&quot;^i&quot;baselinetab&quot;^i&quot;widthtab&quot;^i}'>
<field name='pixa' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='size' declared_type='l_int32' type='i'/>
<field name='directory' declared_type='char*' type='*'/>
<field name='baseline1' declared_type='l_int32' type='i'/>
<field name='baseline2' declared_type='l_int32' type='i'/>
<field name='baseline3' declared_type='l_int32' type='i'/>
<field name='lineheight' declared_type='l_int32' type='i'/>
<field name='kernwidth' declared_type='l_int32' type='i'/>
<field name='spacewidth' declared_type='l_int32' type='i'/>
<field name='vertlinesep' declared_type='l_int32' type='i'/>
<field name='fonttab' declared_type='l_int32*' type='^i'/>
<field name='baselinetab' declared_type='l_int32*' type='^i'/>
<field name='widthtab' declared_type='l_int32*' type='^i'/>
</struct>
<struct name='L_BYTEA' type='{L_Bytea=&quot;nalloc&quot;I&quot;size&quot;I&quot;refcount&quot;i&quot;data&quot;*}'>
<field name='nalloc' declared_type='size_t' type='L'/>
<field name='size' declared_type='size_t' type='L'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_uint8*' type='*'/>
</struct>
<struct name='L_Bmf' type='{L_Bmf=&quot;pixa&quot;^{Pixa}&quot;size&quot;i&quot;directory&quot;*&quot;baseline1&quot;i&quot;baseline2&quot;i&quot;baseline3&quot;i&quot;lineheight&quot;i&quot;kernwidth&quot;i&quot;spacewidth&quot;i&quot;vertlinesep&quot;i&quot;fonttab&quot;^i&quot;baselinetab&quot;^i&quot;widthtab&quot;^i}'>
<field name='pixa' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='size' declared_type='l_int32' type='i'/>
<field name='directory' declared_type='char*' type='*'/>
<field name='baseline1' declared_type='l_int32' type='i'/>
<field name='baseline2' declared_type='l_int32' type='i'/>
<field name='baseline3' declared_type='l_int32' type='i'/>
<field name='lineheight' declared_type='l_int32' type='i'/>
<field name='kernwidth' declared_type='l_int32' type='i'/>
<field name='spacewidth' declared_type='l_int32' type='i'/>
<field name='vertlinesep' declared_type='l_int32' type='i'/>
<field name='fonttab' declared_type='l_int32*' type='^i'/>
<field name='baselinetab' declared_type='l_int32*' type='^i'/>
<field name='widthtab' declared_type='l_int32*' type='^i'/>
</struct>
<struct name='L_Bytea' type='{L_Bytea=&quot;nalloc&quot;I&quot;size&quot;I&quot;refcount&quot;i&quot;data&quot;*}'>
<field name='nalloc' declared_type='size_t' type='L'/>
<field name='size' declared_type='size_t' type='L'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_uint8*' type='*'/>
</struct>
<struct name='L_COMPRESSED_DATA' type='{L_Compressed_Data=&quot;type&quot;i&quot;datacomp&quot;*&quot;nbytescomp&quot;I&quot;data85&quot;*&quot;nbytes85&quot;I&quot;cmapdata85&quot;*&quot;cmapdatahex&quot;*&quot;ncolors&quot;i&quot;w&quot;i&quot;h&quot;i&quot;bps&quot;i&quot;spp&quot;i&quot;minisblack&quot;i&quot;nbytes&quot;I&quot;res&quot;i}'>
<field name='type' declared_type='l_int32' type='i'/>
<field name='datacomp' declared_type='l_uint8*' type='*'/>
<field name='nbytescomp' declared_type='size_t' type='L'/>
<field name='data85' declared_type='char*' type='*'/>
<field name='nbytes85' declared_type='size_t' type='L'/>
<field name='cmapdata85' declared_type='char*' type='*'/>
<field name='cmapdatahex' declared_type='char*' type='*'/>
<field name='ncolors' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='bps' declared_type='l_int32' type='i'/>
<field name='spp' declared_type='l_int32' type='i'/>
<field name='minisblack' declared_type='l_int32' type='i'/>
<field name='nbytes' declared_type='size_t' type='L'/>
<field name='res' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_Compressed_Data' type='{L_Compressed_Data=&quot;type&quot;i&quot;datacomp&quot;*&quot;nbytescomp&quot;I&quot;data85&quot;*&quot;nbytes85&quot;I&quot;cmapdata85&quot;*&quot;cmapdatahex&quot;*&quot;ncolors&quot;i&quot;w&quot;i&quot;h&quot;i&quot;bps&quot;i&quot;spp&quot;i&quot;minisblack&quot;i&quot;nbytes&quot;I&quot;res&quot;i}'>
<field name='type' declared_type='l_int32' type='i'/>
<field name='datacomp' declared_type='l_uint8*' type='*'/>
<field name='nbytescomp' declared_type='size_t' type='L'/>
<field name='data85' declared_type='char*' type='*'/>
<field name='nbytes85' declared_type='size_t' type='L'/>
<field name='cmapdata85' declared_type='char*' type='*'/>
<field name='cmapdatahex' declared_type='char*' type='*'/>
<field name='ncolors' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='bps' declared_type='l_int32' type='i'/>
<field name='spp' declared_type='l_int32' type='i'/>
<field name='minisblack' declared_type='l_int32' type='i'/>
<field name='nbytes' declared_type='size_t' type='L'/>
<field name='res' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_DEWARP' type='{L_Dewarp=&quot;pixs&quot;^{Pix}&quot;pixd&quot;^{Pix}&quot;sampvdispar&quot;^{FPix}&quot;samphdispar&quot;^{FPix}&quot;fullvdispar&quot;^{FPix}&quot;fullhdispar&quot;^{FPix}&quot;naflats&quot;^{Numa}&quot;nacurves&quot;^{Numa}&quot;pageno&quot;i&quot;sampling&quot;i&quot;minlines&quot;i&quot;applyhoriz&quot;i&quot;nx&quot;i&quot;ny&quot;i&quot;extraw&quot;i&quot;success&quot;i}'>
<field name='pixs' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixd' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='sampvdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='samphdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='fullvdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='fullhdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='naflats' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nacurves' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='pageno' declared_type='l_int32' type='i'/>
<field name='sampling' declared_type='l_int32' type='i'/>
<field name='minlines' declared_type='l_int32' type='i'/>
<field name='applyhoriz' declared_type='l_int32' type='i'/>
<field name='nx' declared_type='l_int32' type='i'/>
<field name='ny' declared_type='l_int32' type='i'/>
<field name='extraw' declared_type='l_int32' type='i'/>
<field name='success' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_Dewarp' type='{L_Dewarp=&quot;pixs&quot;^{Pix}&quot;pixd&quot;^{Pix}&quot;sampvdispar&quot;^{FPix}&quot;samphdispar&quot;^{FPix}&quot;fullvdispar&quot;^{FPix}&quot;fullhdispar&quot;^{FPix}&quot;naflats&quot;^{Numa}&quot;nacurves&quot;^{Numa}&quot;pageno&quot;i&quot;sampling&quot;i&quot;minlines&quot;i&quot;applyhoriz&quot;i&quot;nx&quot;i&quot;ny&quot;i&quot;extraw&quot;i&quot;success&quot;i}'>
<field name='pixs' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixd' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='sampvdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='samphdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='fullvdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='fullhdispar' declared_type='struct FPix*' type='^{FPix=iiiiii^f}'/>
<field name='naflats' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nacurves' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='pageno' declared_type='l_int32' type='i'/>
<field name='sampling' declared_type='l_int32' type='i'/>
<field name='minlines' declared_type='l_int32' type='i'/>
<field name='applyhoriz' declared_type='l_int32' type='i'/>
<field name='nx' declared_type='l_int32' type='i'/>
<field name='ny' declared_type='l_int32' type='i'/>
<field name='extraw' declared_type='l_int32' type='i'/>
<field name='success' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_HEAP' type='{L_Heap=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;direction&quot;i}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='direction' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_Heap' type='{L_Heap=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;direction&quot;i}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='direction' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_KERNEL' type='{L_Kernel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^f}'>
<field name='sy' declared_type='l_int32' type='i'/>
<field name='sx' declared_type='l_int32' type='i'/>
<field name='cy' declared_type='l_int32' type='i'/>
<field name='cx' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float32**' type='^^f'/>
</struct>
<struct name='L_Kernel' type='{L_Kernel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^f}'>
<field name='sy' declared_type='l_int32' type='i'/>
<field name='sx' declared_type='l_int32' type='i'/>
<field name='cy' declared_type='l_int32' type='i'/>
<field name='cx' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_float32**' type='^^f'/>
</struct>
<struct name='L_PDF_DATA' type='{L_Pdf_Data=&quot;title&quot;*&quot;n&quot;i&quot;ncmap&quot;i&quot;cida&quot;^{L_Ptra}&quot;id&quot;*&quot;obj1&quot;*&quot;obj2&quot;*&quot;obj3&quot;*&quot;obj4&quot;*&quot;obj5&quot;*&quot;poststream&quot;*&quot;trailer&quot;*&quot;xy&quot;^{Pta}&quot;wh&quot;^{Pta}&quot;mediabox&quot;^{Box}&quot;saprex&quot;^{Sarray}&quot;sacmap&quot;^{Sarray}&quot;objsize&quot;^{Numa}&quot;objloc&quot;^{Numa}&quot;xrefloc&quot;i}'>
<field name='title' declared_type='char*' type='*'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='ncmap' declared_type='l_int32' type='i'/>
<field name='cida' declared_type='struct L_Ptra*' type='^{L_Ptra=iii^^v}'/>
<field name='id' declared_type='char*' type='*'/>
<field name='obj1' declared_type='char*' type='*'/>
<field name='obj2' declared_type='char*' type='*'/>
<field name='obj3' declared_type='char*' type='*'/>
<field name='obj4' declared_type='char*' type='*'/>
<field name='obj5' declared_type='char*' type='*'/>
<field name='poststream' declared_type='char*' type='*'/>
<field name='trailer' declared_type='char*' type='*'/>
<field name='xy' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='wh' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='mediabox' declared_type='struct Box*' type='^{Box=iiiiI}'/>
<field name='saprex' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='sacmap' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='objsize' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='objloc' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='xrefloc' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_PTRA' type='{L_Ptra=&quot;nalloc&quot;i&quot;imax&quot;i&quot;nactual&quot;i&quot;array&quot;^^v}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='imax' declared_type='l_int32' type='i'/>
<field name='nactual' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
</struct>
<struct name='L_PTRAA' type='{L_Ptraa=&quot;nalloc&quot;i&quot;ptra&quot;^^{L_Ptra}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='ptra' declared_type='struct L_Ptra**' type='^^{L_Ptra}'/>
</struct>
<struct name='L_Pdf_Data' type='{L_Pdf_Data=&quot;title&quot;*&quot;n&quot;i&quot;ncmap&quot;i&quot;cida&quot;^{L_Ptra}&quot;id&quot;*&quot;obj1&quot;*&quot;obj2&quot;*&quot;obj3&quot;*&quot;obj4&quot;*&quot;obj5&quot;*&quot;poststream&quot;*&quot;trailer&quot;*&quot;xy&quot;^{Pta}&quot;wh&quot;^{Pta}&quot;mediabox&quot;^{Box}&quot;saprex&quot;^{Sarray}&quot;sacmap&quot;^{Sarray}&quot;objsize&quot;^{Numa}&quot;objloc&quot;^{Numa}&quot;xrefloc&quot;i}'>
<field name='title' declared_type='char*' type='*'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='ncmap' declared_type='l_int32' type='i'/>
<field name='cida' declared_type='struct L_Ptra*' type='^{L_Ptra=iii^^v}'/>
<field name='id' declared_type='char*' type='*'/>
<field name='obj1' declared_type='char*' type='*'/>
<field name='obj2' declared_type='char*' type='*'/>
<field name='obj3' declared_type='char*' type='*'/>
<field name='obj4' declared_type='char*' type='*'/>
<field name='obj5' declared_type='char*' type='*'/>
<field name='poststream' declared_type='char*' type='*'/>
<field name='trailer' declared_type='char*' type='*'/>
<field name='xy' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='wh' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='mediabox' declared_type='struct Box*' type='^{Box=iiiiI}'/>
<field name='saprex' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='sacmap' declared_type='struct Sarray*' type='^{Sarray=iii^*}'/>
<field name='objsize' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='objloc' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='xrefloc' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_Ptra' type='{L_Ptra=&quot;nalloc&quot;i&quot;imax&quot;i&quot;nactual&quot;i&quot;array&quot;^^v}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='imax' declared_type='l_int32' type='i'/>
<field name='nactual' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
</struct>
<struct name='L_Ptraa' type='{L_Ptraa=&quot;nalloc&quot;i&quot;ptra&quot;^^{L_Ptra}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='ptra' declared_type='struct L_Ptra**' type='^^{L_Ptra}'/>
</struct>
<struct name='L_QUEUE' type='{L_Queue=&quot;nalloc&quot;i&quot;nhead&quot;i&quot;nelem&quot;i&quot;array&quot;^^v&quot;stack&quot;^{L_Stack}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='nhead' declared_type='l_int32' type='i'/>
<field name='nelem' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='stack' declared_type='struct L_Stack*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_Queue' type='{L_Queue=&quot;nalloc&quot;i&quot;nhead&quot;i&quot;nelem&quot;i&quot;array&quot;^^v&quot;stack&quot;^{L_Stack}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='nhead' declared_type='l_int32' type='i'/>
<field name='nelem' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='stack' declared_type='struct L_Stack*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_REGPARAMS' type='{L_RegParams=&quot;fp&quot;^{__sFILE}&quot;testname&quot;*&quot;tempfile&quot;*&quot;mode&quot;i&quot;index&quot;i&quot;success&quot;i&quot;display&quot;i&quot;tstart&quot;^v}'>
<field name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<field name='testname' declared_type='char*' type='*'/>
<field name='tempfile' declared_type='char*' type='*'/>
<field name='mode' declared_type='l_int32' type='i'/>
<field name='index' declared_type='l_int32' type='i'/>
<field name='success' declared_type='l_int32' type='i'/>
<field name='display' declared_type='l_int32' type='i'/>
<field name='tstart' declared_type='L_TIMER' type='^v'/>
</struct>
<struct name='L_RegParams' type='{L_RegParams=&quot;fp&quot;^{__sFILE}&quot;testname&quot;*&quot;tempfile&quot;*&quot;mode&quot;i&quot;index&quot;i&quot;success&quot;i&quot;display&quot;i&quot;tstart&quot;^v}'>
<field name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<field name='testname' declared_type='char*' type='*'/>
<field name='tempfile' declared_type='char*' type='*'/>
<field name='mode' declared_type='l_int32' type='i'/>
<field name='index' declared_type='l_int32' type='i'/>
<field name='success' declared_type='l_int32' type='i'/>
<field name='display' declared_type='l_int32' type='i'/>
<field name='tstart' declared_type='L_TIMER' type='^v'/>
</struct>
<struct name='L_STACK' type='{L_Stack=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;auxstack&quot;^{L_Stack}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='auxstack' declared_type='struct L_Stack*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_SUDOKU' type='{L_Sudoku=&quot;num&quot;i&quot;locs&quot;^i&quot;current&quot;i&quot;init&quot;^i&quot;state&quot;^i&quot;nguess&quot;i&quot;finished&quot;i&quot;failure&quot;i}'>
<field name='num' declared_type='l_int32' type='i'/>
<field name='locs' declared_type='l_int32*' type='^i'/>
<field name='current' declared_type='l_int32' type='i'/>
<field name='init' declared_type='l_int32*' type='^i'/>
<field name='state' declared_type='l_int32*' type='^i'/>
<field name='nguess' declared_type='l_int32' type='i'/>
<field name='finished' declared_type='l_int32' type='i'/>
<field name='failure' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_Stack' type='{L_Stack=&quot;nalloc&quot;i&quot;n&quot;i&quot;array&quot;^^v&quot;auxstack&quot;^{L_Stack}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='array' declared_type='void**' type='^^v'/>
<field name='auxstack' declared_type='struct L_Stack*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</struct>
<struct name='L_Sudoku' type='{L_Sudoku=&quot;num&quot;i&quot;locs&quot;^i&quot;current&quot;i&quot;init&quot;^i&quot;state&quot;^i&quot;nguess&quot;i&quot;finished&quot;i&quot;failure&quot;i}'>
<field name='num' declared_type='l_int32' type='i'/>
<field name='locs' declared_type='l_int32*' type='^i'/>
<field name='current' declared_type='l_int32' type='i'/>
<field name='init' declared_type='l_int32*' type='^i'/>
<field name='state' declared_type='l_int32*' type='^i'/>
<field name='nguess' declared_type='l_int32' type='i'/>
<field name='finished' declared_type='l_int32' type='i'/>
<field name='failure' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_WSHED' type='{L_WShed=&quot;pixs&quot;^{Pix}&quot;pixm&quot;^{Pix}&quot;mindepth&quot;i&quot;pixlab&quot;^{Pix}&quot;pixt&quot;^{Pix}&quot;lines8&quot;^^v&quot;linem1&quot;^^v&quot;linelab32&quot;^^v&quot;linet1&quot;^^v&quot;pixad&quot;^{Pixa}&quot;ptas&quot;^{Pta}&quot;nasi&quot;^{Numa}&quot;nash&quot;^{Numa}&quot;namh&quot;^{Numa}&quot;nalevels&quot;^{Numa}&quot;nseeds&quot;i&quot;nother&quot;i&quot;lut&quot;^i&quot;links&quot;^^{Numa}&quot;arraysize&quot;i&quot;debug&quot;i}'>
<field name='pixs' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixm' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='mindepth' declared_type='l_int32' type='i'/>
<field name='pixlab' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixt' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='lines8' declared_type='void**' type='^^v'/>
<field name='linem1' declared_type='void**' type='^^v'/>
<field name='linelab32' declared_type='void**' type='^^v'/>
<field name='linet1' declared_type='void**' type='^^v'/>
<field name='pixad' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='ptas' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='nasi' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nash' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='namh' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nalevels' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nseeds' declared_type='l_int32' type='i'/>
<field name='nother' declared_type='l_int32' type='i'/>
<field name='lut' declared_type='l_int32*' type='^i'/>
<field name='links' declared_type='struct Numa**' type='^^{Numa}'/>
<field name='arraysize' declared_type='l_int32' type='i'/>
<field name='debug' declared_type='l_int32' type='i'/>
</struct>
<struct name='L_WShed' type='{L_WShed=&quot;pixs&quot;^{Pix}&quot;pixm&quot;^{Pix}&quot;mindepth&quot;i&quot;pixlab&quot;^{Pix}&quot;pixt&quot;^{Pix}&quot;lines8&quot;^^v&quot;linem1&quot;^^v&quot;linelab32&quot;^^v&quot;linet1&quot;^^v&quot;pixad&quot;^{Pixa}&quot;ptas&quot;^{Pta}&quot;nasi&quot;^{Numa}&quot;nash&quot;^{Numa}&quot;namh&quot;^{Numa}&quot;nalevels&quot;^{Numa}&quot;nseeds&quot;i&quot;nother&quot;i&quot;lut&quot;^i&quot;links&quot;^^{Numa}&quot;arraysize&quot;i&quot;debug&quot;i}'>
<field name='pixs' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixm' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='mindepth' declared_type='l_int32' type='i'/>
<field name='pixlab' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='pixt' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='lines8' declared_type='void**' type='^^v'/>
<field name='linem1' declared_type='void**' type='^^v'/>
<field name='linelab32' declared_type='void**' type='^^v'/>
<field name='linet1' declared_type='void**' type='^^v'/>
<field name='pixad' declared_type='struct Pixa*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<field name='ptas' declared_type='struct Pta*' type='^{Pta=iii^f^f}'/>
<field name='nasi' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nash' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='namh' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nalevels' declared_type='struct Numa*' type='^{Numa=iiiff^f}'/>
<field name='nseeds' declared_type='l_int32' type='i'/>
<field name='nother' declared_type='l_int32' type='i'/>
<field name='lut' declared_type='l_int32*' type='^i'/>
<field name='links' declared_type='struct Numa**' type='^^{Numa}'/>
<field name='arraysize' declared_type='l_int32' type='i'/>
<field name='debug' declared_type='l_int32' type='i'/>
</struct>
<struct name='NUMA' type='{Numa=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;f&quot;delx&quot;f&quot;array&quot;^f}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='startx' declared_type='l_float32' type='f'/>
<field name='delx' declared_type='l_float32' type='f'/>
<field name='array' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='NUMA2D' type='{Numa2d=&quot;nrows&quot;i&quot;ncols&quot;i&quot;initsize&quot;i&quot;numa&quot;^^^{Numa}}'>
<field name='nrows' declared_type='l_int32' type='i'/>
<field name='ncols' declared_type='l_int32' type='i'/>
<field name='initsize' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa***' type='^^^{Numa}'/>
</struct>
<struct name='NUMAA' type='{Numaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;numa&quot;^^{Numa}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa**' type='^^{Numa}'/>
</struct>
<struct name='NUMAHASH' type='{NumaHash=&quot;nbuckets&quot;i&quot;initsize&quot;i&quot;numa&quot;^^{Numa}}'>
<field name='nbuckets' declared_type='l_int32' type='i'/>
<field name='initsize' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa**' type='^^{Numa}'/>
</struct>
<struct name='Numa' type='{Numa=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;startx&quot;f&quot;delx&quot;f&quot;array&quot;^f}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='startx' declared_type='l_float32' type='f'/>
<field name='delx' declared_type='l_float32' type='f'/>
<field name='array' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='Numa2d' type='{Numa2d=&quot;nrows&quot;i&quot;ncols&quot;i&quot;initsize&quot;i&quot;numa&quot;^^^{Numa}}'>
<field name='nrows' declared_type='l_int32' type='i'/>
<field name='ncols' declared_type='l_int32' type='i'/>
<field name='initsize' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa***' type='^^^{Numa}'/>
</struct>
<struct name='NumaHash' type='{NumaHash=&quot;nbuckets&quot;i&quot;initsize&quot;i&quot;numa&quot;^^{Numa}}'>
<field name='nbuckets' declared_type='l_int32' type='i'/>
<field name='initsize' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa**' type='^^{Numa}'/>
</struct>
<struct name='Numaa' type='{Numaa=&quot;nalloc&quot;i&quot;n&quot;i&quot;numa&quot;^^{Numa}}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='numa' declared_type='struct Numa**' type='^^{Numa}'/>
</struct>
<struct name='PIX' type='{Pix=&quot;w&quot;I&quot;h&quot;I&quot;d&quot;I&quot;wpl&quot;I&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;informat&quot;i&quot;text&quot;*&quot;colormap&quot;^{PixColormap}&quot;data&quot;^I}'>
<field name='w' declared_type='l_uint32' type='I'/>
<field name='h' declared_type='l_uint32' type='I'/>
<field name='d' declared_type='l_uint32' type='I'/>
<field name='wpl' declared_type='l_uint32' type='I'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='informat' declared_type='l_int32' type='i'/>
<field name='text' declared_type='char*' type='*'/>
<field name='colormap' declared_type='struct PixColormap*' type='^{PixColormap=^viii}'/>
<field name='data' declared_type='l_uint32*' type='^I'/>
</struct>
<struct name='PIXA' type='{Pixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;pix&quot;^^{Pix}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='pix' declared_type='struct Pix**' type='^^{Pix}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXAA' type='{Pixaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixa&quot;^^{Pixa}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pixa' declared_type='struct Pixa**' type='^^{Pixa}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXAC' type='{PixaComp=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixc&quot;^^{PixComp}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pixc' declared_type='struct PixComp**' type='^^{PixComp}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PIXACC' type='{Pixacc=&quot;w&quot;i&quot;h&quot;i&quot;offset&quot;i&quot;pix&quot;^{Pix}}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='offset' declared_type='l_int32' type='i'/>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</struct>
<struct name='PIXC' type='{PixComp=&quot;w&quot;i&quot;h&quot;i&quot;d&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;comptype&quot;i&quot;text&quot;*&quot;cmapflag&quot;i&quot;data&quot;*&quot;size&quot;I}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='d' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='comptype' declared_type='l_int32' type='i'/>
<field name='text' declared_type='char*' type='*'/>
<field name='cmapflag' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_uint8*' type='*'/>
<field name='size' declared_type='size_t' type='L'/>
</struct>
<struct name='PIXCMAP' type='{PixColormap=&quot;array&quot;^v&quot;depth&quot;i&quot;nalloc&quot;i&quot;n&quot;i}'>
<field name='array' declared_type='void*' type='^v'/>
<field name='depth' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
</struct>
<struct name='PIXTILING' type='{PixTiling=&quot;pix&quot;^{Pix}&quot;nx&quot;i&quot;ny&quot;i&quot;w&quot;i&quot;h&quot;i&quot;xoverlap&quot;i&quot;yoverlap&quot;i&quot;strip&quot;i}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='nx' declared_type='l_int32' type='i'/>
<field name='ny' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='xoverlap' declared_type='l_int32' type='i'/>
<field name='yoverlap' declared_type='l_int32' type='i'/>
<field name='strip' declared_type='l_int32' type='i'/>
</struct>
<struct name='PTA' type='{Pta=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;i&quot;x&quot;^f&quot;y&quot;^f}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='x' declared_type='l_float32*' type='^f'/>
<field name='y' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='PTAA' type='{Ptaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pta&quot;^^{Pta}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pta' declared_type='struct Pta**' type='^^{Pta}'/>
</struct>
<struct name='Pix' type='{Pix=&quot;w&quot;I&quot;h&quot;I&quot;d&quot;I&quot;wpl&quot;I&quot;refcount&quot;I&quot;xres&quot;i&quot;yres&quot;i&quot;informat&quot;i&quot;text&quot;*&quot;colormap&quot;^{PixColormap}&quot;data&quot;^I}'>
<field name='w' declared_type='l_uint32' type='I'/>
<field name='h' declared_type='l_uint32' type='I'/>
<field name='d' declared_type='l_uint32' type='I'/>
<field name='wpl' declared_type='l_uint32' type='I'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='informat' declared_type='l_int32' type='i'/>
<field name='text' declared_type='char*' type='*'/>
<field name='colormap' declared_type='struct PixColormap*' type='^{PixColormap=^viii}'/>
<field name='data' declared_type='l_uint32*' type='^I'/>
</struct>
<struct name='PixColormap' type='{PixColormap=&quot;array&quot;^v&quot;depth&quot;i&quot;nalloc&quot;i&quot;n&quot;i}'>
<field name='array' declared_type='void*' type='^v'/>
<field name='depth' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
</struct>
<struct name='PixComp' type='{PixComp=&quot;w&quot;i&quot;h&quot;i&quot;d&quot;i&quot;xres&quot;i&quot;yres&quot;i&quot;comptype&quot;i&quot;text&quot;*&quot;cmapflag&quot;i&quot;data&quot;*&quot;size&quot;I}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='d' declared_type='l_int32' type='i'/>
<field name='xres' declared_type='l_int32' type='i'/>
<field name='yres' declared_type='l_int32' type='i'/>
<field name='comptype' declared_type='l_int32' type='i'/>
<field name='text' declared_type='char*' type='*'/>
<field name='cmapflag' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_uint8*' type='*'/>
<field name='size' declared_type='size_t' type='L'/>
</struct>
<struct name='PixTiling' type='{PixTiling=&quot;pix&quot;^{Pix}&quot;nx&quot;i&quot;ny&quot;i&quot;w&quot;i&quot;h&quot;i&quot;xoverlap&quot;i&quot;yoverlap&quot;i&quot;strip&quot;i}'>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<field name='nx' declared_type='l_int32' type='i'/>
<field name='ny' declared_type='l_int32' type='i'/>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='xoverlap' declared_type='l_int32' type='i'/>
<field name='yoverlap' declared_type='l_int32' type='i'/>
<field name='strip' declared_type='l_int32' type='i'/>
</struct>
<struct name='Pixa' type='{Pixa=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;I&quot;pix&quot;^^{Pix}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_uint32' type='I'/>
<field name='pix' declared_type='struct Pix**' type='^^{Pix}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='PixaComp' type='{PixaComp=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixc&quot;^^{PixComp}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pixc' declared_type='struct PixComp**' type='^^{PixComp}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='Pixaa' type='{Pixaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pixa&quot;^^{Pixa}&quot;boxa&quot;^{Boxa}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pixa' declared_type='struct Pixa**' type='^^{Pixa}'/>
<field name='boxa' declared_type='struct Boxa*' type='^{Boxa=iiI^^{Box}}'/>
</struct>
<struct name='Pixacc' type='{Pixacc=&quot;w&quot;i&quot;h&quot;i&quot;offset&quot;i&quot;pix&quot;^{Pix}}'>
<field name='w' declared_type='l_int32' type='i'/>
<field name='h' declared_type='l_int32' type='i'/>
<field name='offset' declared_type='l_int32' type='i'/>
<field name='pix' declared_type='struct Pix*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</struct>
<struct name='Pta' type='{Pta=&quot;n&quot;i&quot;nalloc&quot;i&quot;refcount&quot;i&quot;x&quot;^f&quot;y&quot;^f}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='x' declared_type='l_float32*' type='^f'/>
<field name='y' declared_type='l_float32*' type='^f'/>
</struct>
<struct name='Ptaa' type='{Ptaa=&quot;n&quot;i&quot;nalloc&quot;i&quot;pta&quot;^^{Pta}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='pta' declared_type='struct Pta**' type='^^{Pta}'/>
</struct>
<struct name='RGBA_QUAD' type='{RGBA_Quad=&quot;blue&quot;C&quot;green&quot;C&quot;red&quot;C&quot;reserved&quot;C}'>
<field name='blue' declared_type='l_uint8' type='C'/>
<field name='green' declared_type='l_uint8' type='C'/>
<field name='red' declared_type='l_uint8' type='C'/>
<field name='reserved' declared_type='l_uint8' type='C'/>
</struct>
<struct name='RGBA_Quad' type='{RGBA_Quad=&quot;blue&quot;C&quot;green&quot;C&quot;red&quot;C&quot;reserved&quot;C}'>
<field name='blue' declared_type='l_uint8' type='C'/>
<field name='green' declared_type='l_uint8' type='C'/>
<field name='red' declared_type='l_uint8' type='C'/>
<field name='reserved' declared_type='l_uint8' type='C'/>
</struct>
<struct name='SARRAY' type='{Sarray=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;array&quot;^*}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='array' declared_type='char**' type='^*'/>
</struct>
<struct name='SEL' type='{Sel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^i&quot;name&quot;*}'>
<field name='sy' declared_type='l_int32' type='i'/>
<field name='sx' declared_type='l_int32' type='i'/>
<field name='cy' declared_type='l_int32' type='i'/>
<field name='cx' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_int32**' type='^^i'/>
<field name='name' declared_type='char*' type='*'/>
</struct>
<struct name='SELA' type='{Sela=&quot;n&quot;i&quot;nalloc&quot;i&quot;sel&quot;^^{Sel}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='sel' declared_type='struct Sel**' type='^^{Sel}'/>
</struct>
<struct name='Sarray' type='{Sarray=&quot;nalloc&quot;i&quot;n&quot;i&quot;refcount&quot;i&quot;array&quot;^*}'>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='n' declared_type='l_int32' type='i'/>
<field name='refcount' declared_type='l_int32' type='i'/>
<field name='array' declared_type='char**' type='^*'/>
</struct>
<struct name='Sel' type='{Sel=&quot;sy&quot;i&quot;sx&quot;i&quot;cy&quot;i&quot;cx&quot;i&quot;data&quot;^^i&quot;name&quot;*}'>
<field name='sy' declared_type='l_int32' type='i'/>
<field name='sx' declared_type='l_int32' type='i'/>
<field name='cy' declared_type='l_int32' type='i'/>
<field name='cx' declared_type='l_int32' type='i'/>
<field name='data' declared_type='l_int32**' type='^^i'/>
<field name='name' declared_type='char*' type='*'/>
</struct>
<struct name='Sela' type='{Sela=&quot;n&quot;i&quot;nalloc&quot;i&quot;sel&quot;^^{Sel}}'>
<field name='n' declared_type='l_int32' type='i'/>
<field name='nalloc' declared_type='l_int32' type='i'/>
<field name='sel' declared_type='struct Sel**' type='^^{Sel}'/>
</struct>
<opaque name='EANYCODE_CHAR' type='^{=}'/>
<opaque name='EFONT_DESC' type='^{=}'/>
<opaque name='EOCR_DESC' type='^{=}'/>
<opaque name='FT_LIBRARY' type='^{ft_library_st=}'/>
<opaque name='INT_FEATURE' type='^{INT_FEATURE_STRUCT=}'/>
<constant name='ADDED_BORDER' const='true' declared_type='l_int32' type='i'/>
<constant name='ASSERT_FAILED' const='true' declared_type='int' type='i'/>
<constant name='BLOCK_LIST' declared_type='int' type='i'/>
<constant name='C128_FUNC_1' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_FUNC_2' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_FUN_3' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_GOTO_A' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_GOTO_B' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_GOTO_C' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_SHIFT' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_START_A' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_START_B' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_START_C' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='C128_SYMBOL_WIDTH' const='true' declared_type='l_int32' type='i'/>
<constant name='C25_START' const='true' declared_type='l_int32' type='i'/>
<constant name='C25_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='C39_START' const='true' declared_type='l_int32' type='i'/>
<constant name='C39_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='C93_START' const='true' declared_type='l_int32' type='i'/>
<constant name='C93_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='CI25_START' const='true' declared_type='l_int32' type='i'/>
<constant name='CI25_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='Codabar' const='true' declared_type='char**' type='[20*]'/>
<constant name='CodabarVal' const='true' declared_type='char*' type='[21c]'/>
<constant name='Code128' const='true' declared_type='char**' type='[107*]'/>
<constant name='Code2of5' const='true' declared_type='char**' type='[12*]'/>
<constant name='Code39' const='true' declared_type='char**' type='[44*]'/>
<constant name='Code39Val' const='true' declared_type='char*' type='[45c]'/>
<constant name='Code93' const='true' declared_type='char**' type='[48*]'/>
<constant name='Code93Val' const='true' declared_type='char*' type='[49c]'/>
<constant name='CodeI2of5' const='true' declared_type='char**' type='[12*]'/>
<constant name='DENORM' declared_type='int' type='i'/>
<constant name='ETEXT_DESC' declared_type='int' type='i'/>
<constant name='IMAGE' declared_type='int' type='i'/>
<constant name='INVALID_UNICHAR' const='true' declared_type='char*' type='[20c]'/>
<constant name='INVALID_UNICHAR_ID' const='true' declared_type='int' type='i'/>
<constant name='L_ALPHA_SHIFT' const='true' declared_type='l_int32' type='i'/>
<constant name='L_BLUE_SHIFT' const='true' declared_type='l_int32' type='i'/>
<constant name='L_BLUE_WEIGHT' const='true' declared_type='l_float32' type='f'/>
<constant name='L_GREEN_SHIFT' const='true' declared_type='l_int32' type='i'/>
<constant name='L_GREEN_WEIGHT' const='true' declared_type='l_float32' type='f'/>
<constant name='L_NOCOPY' const='true' declared_type='l_int32' type='i'/>
<constant name='L_RED_SHIFT' const='true' declared_type='l_int32' type='i'/>
<constant name='L_RED_WEIGHT' const='true' declared_type='l_float32' type='f'/>
<constant name='NumSupportedBarcodeFormats' const='true' declared_type='l_int32' type='i'/>
<constant name='PAGE_RES' declared_type='int' type='i'/>
<constant name='PAGE_RES_IT' declared_type='int' type='i'/>
<constant name='PBLOB' declared_type='int' type='i'/>
<constant name='ROW' declared_type='int' type='i'/>
<constant name='STRING' declared_type='int' type='i'/>
<constant name='SupportedBarcodeFormat' const='true' declared_type='l_int32*' type='[7i]'/>
<constant name='SupportedBarcodeFormatName' const='true' declared_type='char**' type='[7*]'/>
<constant name='TBOX' declared_type='int' type='i'/>
<constant name='TessClosure' declared_type='int' type='i'/>
<constant name='UNICHAR' declared_type='int' type='i'/>
<constant name='UPCA_MID' const='true' declared_type='l_int32' type='i'/>
<constant name='UPCA_START' const='true' declared_type='l_int32' type='i'/>
<constant name='UPCA_STOP' const='true' declared_type='l_int32' type='i'/>
<constant name='Upca' const='true' declared_type='char**' type='[13*]'/>
<constant name='WERD' declared_type='int' type='i'/>
<constant name='gplotfileoutputs' const='true' declared_type='char**' type='^*'/>
<constant name='gplotfilestyles' const='true' declared_type='char**' type='^*'/>
<constant name='gplotstylenames' const='true' declared_type='char**' type='^*'/>
<constant name='kPointsPerInch' const='true' declared_type='int' type='i'/>
<constant name='kPolyBlockNames' const='true' declared_type='char**' type='^*'/>
<constant name='tesseract' declared_type='int' type='i'/>
<string_constant name='INT32FORMAT' value='%d'/>
<string_constant name='INT64FORMAT' value='%lld'/>
<string_constant name='JB_DATA_EXT' value='.data'/>
<string_constant name='JB_TEMPLATE_EXT' value='.templates.png'/>
<enum name='ABORT' value='2'/>
<enum name='ASYMMETRIC_MORPH_BC' value='1'/>
<enum name='BADTIMES_TIMEOUT' value='7'/>
<enum name='BMP_FHBYTES' value='14'/>
<enum name='BMP_ID' value='19778'/>
<enum name='BMP_IHBYTES' value='40'/>
<enum name='BOXAA_VERSION_NUMBER' value='3'/>
<enum name='BOXA_VERSION_NUMBER' value='2'/>
<enum name='CCB_GLOBAL_COORDS' value='2'/>
<enum name='CCB_LOCAL_COORDS' value='1'/>
<enum name='CCB_SAVE_ALL_PTS' value='1'/>
<enum name='CCB_SAVE_TURNING_PTS' value='2'/>
<enum name='CHSET_ANSI' value='0'/>
<enum name='CHSET_BIG5' value='136'/>
<enum name='CHSET_CYRILLIC' value='204'/>
<enum name='CHSET_EEUROPE' value='238'/>
<enum name='CHSET_KOREAN' value='129'/>
<enum name='CHSET_SCHINESE' value='134'/>
<enum name='CHSET_SHIFT_JIS' value='128'/>
<enum name='COLOR_BLUE' value='2'/>
<enum name='COLOR_GREEN' value='1'/>
<enum name='COLOR_RED' value='0'/>
<enum name='DBG' value='-1'/>
<enum name='DEFAULT_CLIP_LOWER_1' value='10'/>
<enum name='DEFAULT_CLIP_LOWER_2' value='5'/>
<enum name='DEFAULT_CLIP_UPPER_1' value='10'/>
<enum name='DEFAULT_CLIP_UPPER_2' value='5'/>
<enum name='DEWARP_VERSION_NUMBER' value='1'/>
<enum name='DPIX_VERSION_NUMBER' value='1'/>
<enum name='EUC_BOLD' value='1'/>
<enum name='EUC_ITALIC' value='2'/>
<enum name='EUC_SUBSCRIPT' value='8'/>
<enum name='EUC_SUPERSCRIPT' value='16'/>
<enum name='EUC_UNDERLINE' value='4'/>
<enum name='FFAM_MODERN' value='3'/>
<enum name='FFAM_NONE' value='0'/>
<enum name='FFAM_ROMAN' value='1'/>
<enum name='FFAM_SWISS' value='2'/>
<enum name='FILE_ABORT' value='3'/>
<enum name='FPIX_VERSION_NUMBER' value='1'/>
<enum name='GPLOT_DOTS' value='4'/>
<enum name='GPLOT_EPS' value='3'/>
<enum name='GPLOT_IMPULSES' value='2'/>
<enum name='GPLOT_LATEX' value='5'/>
<enum name='GPLOT_LINEAR_SCALE' value='0'/>
<enum name='GPLOT_LINES' value='0'/>
<enum name='GPLOT_LINESPOINTS' value='3'/>
<enum name='GPLOT_LOG_SCALE_X' value='1'/>
<enum name='GPLOT_LOG_SCALE_X_Y' value='3'/>
<enum name='GPLOT_LOG_SCALE_Y' value='2'/>
<enum name='GPLOT_NONE' value='0'/>
<enum name='GPLOT_PNG' value='1'/>
<enum name='GPLOT_POINTS' value='1'/>
<enum name='GPLOT_PS' value='2'/>
<enum name='GPLOT_VERSION_NUMBER' value='1'/>
<enum name='GPLOT_X11' value='4'/>
<enum name='HAVE_FMEMOPEN' value='0'/>
<enum name='HAVE_LIBGIF' value='0'/>
<enum name='HAVE_LIBJPEG' value='1'/>
<enum name='HAVE_LIBPNG' value='1'/>
<enum name='HAVE_LIBTIFF' value='1'/>
<enum name='HAVE_LIBUNGIF' value='0'/>
<enum name='HAVE_LIBWEBP' value='0'/>
<enum name='HAVE_LIBZ' value='1'/>
<enum name='HPERR' value='-1'/>
<enum name='IFF_BMP' value='1'/>
<enum name='IFF_DEFAULT' value='17'/>
<enum name='IFF_GIF' value='13'/>
<enum name='IFF_JFIF_JPEG' value='2'/>
<enum name='IFF_JP2' value='14'/>
<enum name='IFF_LPDF' value='16'/>
<enum name='IFF_PNG' value='3'/>
<enum name='IFF_PNM' value='11'/>
<enum name='IFF_PS' value='12'/>
<enum name='IFF_SPIX' value='18'/>
<enum name='IFF_TIFF' value='4'/>
<enum name='IFF_TIFF_G3' value='7'/>
<enum name='IFF_TIFF_G4' value='8'/>
<enum name='IFF_TIFF_LZW' value='9'/>
<enum name='IFF_TIFF_PACKBITS' value='5'/>
<enum name='IFF_TIFF_RLE' value='6'/>
<enum name='IFF_TIFF_ZIP' value='10'/>
<enum name='IFF_UNKNOWN' value='0'/>
<enum name='IFF_WEBP' value='15'/>
<enum name='IMAGE_ROUNDING' value='32'/>
<enum name='JB_CHARACTERS' value='1'/>
<enum name='JB_CONN_COMPS' value='0'/>
<enum name='JB_CORRELATION' value='1'/>
<enum name='JB_RANKHAUS' value='0'/>
<enum name='JB_WORDS' value='2'/>
<enum name='KERNEL_VERSION_NUMBER' value='2'/>
<enum name='LANGE_ALBANIAN' value='1052'/>
<enum name='LANGE_BRITISH' value='2057'/>
<enum name='LANGE_BULGARIAN' value='1026'/>
<enum name='LANGE_CROATIAN' value='1050'/>
<enum name='LANGE_CZECH' value='1029'/>
<enum name='LANGE_DANISH' value='1030'/>
<enum name='LANGE_DUTCH' value='1043'/>
<enum name='LANGE_FINNISH' value='1035'/>
<enum name='LANGE_FRENCH' value='1036'/>
<enum name='LANGE_GERMAN' value='1031'/>
<enum name='LANGE_GREEK' value='1032'/>
<enum name='LANGE_HUNGARIAN' value='1038'/>
<enum name='LANGE_ITALIAN' value='1040'/>
<enum name='LANGE_JAPANESE' value='1041'/>
<enum name='LANGE_KOREAN' value='1042'/>
<enum name='LANGE_NONE' value='1024'/>
<enum name='LANGE_NORWEGIAN' value='1044'/>
<enum name='LANGE_POLISH' value='1045'/>
<enum name='LANGE_PORTUGESE' value='1046'/>
<enum name='LANGE_ROMANIAN' value='1048'/>
<enum name='LANGE_RUSSIAN' value='1049'/>
<enum name='LANGE_SCHINESE' value='2052'/>
<enum name='LANGE_SLOVAK' value='1051'/>
<enum name='LANGE_SPANISH' value='1034'/>
<enum name='LANGE_SWEDISH' value='1053'/>
<enum name='LANGE_TCHINESE' value='1028'/>
<enum name='LANGE_TURKISH' value='1055'/>
<enum name='LANGE_USENGLISH' value='1033'/>
<enum name='LEPTONICA_FT_RESOLUTION' value='96'/>
<enum name='LIBLEPT_MAJOR_VERSION' value='1'/>
<enum name='LIBLEPT_MINOR_VERSION' value='68'/>
<enum name='LIST_ABORT' value='1'/>
<enum name='LOC_ADAPTIVE' value='24'/>
<enum name='LOC_DOC_BLK_REJ' value='22'/>
<enum name='LOC_EDGE_PROG' value='4'/>
<enum name='LOC_FUZZY_SPACE' value='14'/>
<enum name='LOC_INIT' value='3'/>
<enum name='LOC_MM_ADAPT' value='21'/>
<enum name='LOC_PASS1' value='7'/>
<enum name='LOC_PASS2' value='8'/>
<enum name='LOC_TEXT_ORD_ROWS' value='5'/>
<enum name='LOC_TEXT_ORD_WORDS' value='6'/>
<enum name='LOC_UNUSED0' value='0'/>
<enum name='LOC_UNUSED1' value='1'/>
<enum name='LOC_UNUSED2' value='2'/>
<enum name='LOC_WRITE_RESULTS' value='23'/>
<enum name='L_ADD_ABOVE' value='1'/>
<enum name='L_ADD_AT_BOTTOM' value='3'/>
<enum name='L_ADD_AT_TOP' value='2'/>
<enum name='L_ADD_BELOW' value='4'/>
<enum name='L_ALL_EDGES' value='2'/>
<enum name='L_ALPHA_CHANNEL' value='3'/>
<enum name='L_ARITH_ADD' value='1'/>
<enum name='L_ARITH_DIVIDE' value='4'/>
<enum name='L_ARITH_MULTIPLY' value='3'/>
<enum name='L_ARITH_SUBTRACT' value='2'/>
<enum name='L_AUTO_DOWNSHIFT' value='0'/>
<enum name='L_BF_ANY' value='1'/>
<enum name='L_BF_CODABAR' value='9'/>
<enum name='L_BF_CODE128' value='2'/>
<enum name='L_BF_CODE2OF5' value='5'/>
<enum name='L_BF_CODE39' value='7'/>
<enum name='L_BF_CODE93' value='8'/>
<enum name='L_BF_CODEI2OF5' value='6'/>
<enum name='L_BF_EAN13' value='4'/>
<enum name='L_BF_EAN8' value='3'/>
<enum name='L_BF_UNKNOWN' value='0'/>
<enum name='L_BF_UPCA' value='10'/>
<enum name='L_BLEND_GRAY' value='4'/>
<enum name='L_BLEND_GRAY_WITH_INVERSE' value='5'/>
<enum name='L_BLEND_TO_BLACK' value='3'/>
<enum name='L_BLEND_TO_WHITE' value='2'/>
<enum name='L_BLEND_WITH_INVERSE' value='1'/>
<enum name='L_BOTH_DIRECTIONS' value='3'/>
<enum name='L_BOUNDARY_BG' value='1'/>
<enum name='L_BOUNDARY_FG' value='2'/>
<enum name='L_BRING_IN_BLACK' value='2'/>
<enum name='L_BRING_IN_WHITE' value='1'/>
<enum name='L_CHOOSE_CONSECUTIVE' value='1'/>
<enum name='L_CHOOSE_MAX' value='2'/>
<enum name='L_CHOOSE_MAX_MIN_DIFF' value='3'/>
<enum name='L_CHOOSE_MIN' value='1'/>
<enum name='L_CHOOSE_SKIP_BY' value='2'/>
<enum name='L_CLEAR_PIXELS' value='2'/>
<enum name='L_CLIP_TO_ZERO' value='1'/>
<enum name='L_CLONE' value='2'/>
<enum name='L_COMPACTION' value='2'/>
<enum name='L_COMPARE_ABS_DIFF' value='3'/>
<enum name='L_COMPARE_SUBTRACT' value='2'/>
<enum name='L_COMPARE_XOR' value='1'/>
<enum name='L_COPY' value='1'/>
<enum name='L_COPY_CLONE' value='3'/>
<enum name='L_DISPLAY_WITH_IV' value='4'/>
<enum name='L_DISPLAY_WITH_XLI' value='2'/>
<enum name='L_DISPLAY_WITH_XV' value='1'/>
<enum name='L_DISPLAY_WITH_XZGV' value='3'/>
<enum name='L_EQUAL_TO_ZERO' value='2'/>
<enum name='L_EUCLIDEAN_DISTANCE' value='2'/>
<enum name='L_EXCLUDE_REGION' value='2'/>
<enum name='L_EXCLUSIVE_OR' value='8'/>
<enum name='L_EXTENDED_BORDER' value='1'/>
<enum name='L_FILL_BLACK' value='2'/>
<enum name='L_FILL_WHITE' value='1'/>
<enum name='L_FIRST_IMAGE' value='1'/>
<enum name='L_FLATE_ENCODE' value='3'/>
<enum name='L_FLIP_PIXELS' value='3'/>
<enum name='L_FOUND' value='1'/>
<enum name='L_FROM_BOTTOM' value='3'/>
<enum name='L_FROM_LEFT' value='0'/>
<enum name='L_FROM_RIGHT' value='1'/>
<enum name='L_FROM_TOP' value='2'/>
<enum name='L_FULL_DOWNSHIFT' value='2'/>
<enum name='L_G4_ENCODE' value='2'/>
<enum name='L_GREATER_THAN_ZERO' value='3'/>
<enum name='L_HANDLE_ONLY' value='0'/>
<enum name='L_HINT_GRAY' value='1'/>
<enum name='L_HORIZ' value='1'/>
<enum name='L_HORIZONTAL_EDGES' value='0'/>
<enum name='L_HORIZONTAL_LINE' value='0'/>
<enum name='L_HORIZONTAL_RUNS' value='0'/>
<enum name='L_HS_HISTO' value='1'/>
<enum name='L_HV_HISTO' value='2'/>
<enum name='L_INCLUDE_REGION' value='1'/>
<enum name='L_INSERT' value='0'/>
<enum name='L_INTERPOLATED' value='1'/>
<enum name='L_INTERSECTION' value='6'/>
<enum name='L_JPEG_ENCODE' value='1'/>
<enum name='L_LAST_IMAGE' value='3'/>
<enum name='L_LESS_THAN_ZERO' value='1'/>
<enum name='L_LINEAR_INTERP' value='1'/>
<enum name='L_LINEAR_SCALE' value='1'/>
<enum name='L_LINEAR_WARP' value='1'/>
<enum name='L_LOG_SCALE' value='2'/>
<enum name='L_MANHATTAN_DISTANCE' value='1'/>
<enum name='L_MAX_DIFF' value='3'/>
<enum name='L_MAX_DIFF_FROM_AVERAGE_2' value='1'/>
<enum name='L_MAX_MIN_DIFF_FROM_2' value='2'/>
<enum name='L_MEAN_ABSVAL' value='1'/>
<enum name='L_MEDIAN_VAL' value='2'/>
<enum name='L_MIN_DOWNSHIFT' value='1'/>
<enum name='L_MIRRORED_BORDER' value='2'/>
<enum name='L_MODE_COUNT' value='4'/>
<enum name='L_MODE_VAL' value='3'/>
<enum name='L_MORPH_CLOSE' value='4'/>
<enum name='L_MORPH_DILATE' value='1'/>
<enum name='L_MORPH_ERODE' value='2'/>
<enum name='L_MORPH_HMT' value='5'/>
<enum name='L_MORPH_OPEN' value='3'/>
<enum name='L_NEG_SLOPE_LINE' value='3'/>
<enum name='L_NEXT_IMAGE' value='2'/>
<enum name='L_NOT_FOUND' value='0'/>
<enum name='L_NO_COMPACTION' value='1'/>
<enum name='L_OBLIQUE_LINE' value='4'/>
<enum name='L_PAINT_DARK' value='2'/>
<enum name='L_PAINT_LIGHT' value='1'/>
<enum name='L_POS_SLOPE_LINE' value='1'/>
<enum name='L_QUADRATIC_INTERP' value='2'/>
<enum name='L_QUADRATIC_WARP' value='2'/>
<enum name='L_REG_COMPARE' value='1'/>
<enum name='L_REG_DISPLAY' value='2'/>
<enum name='L_REG_GENERATE' value='0'/>
<enum name='L_REMOVE' value='1'/>
<enum name='L_ROOT_MEAN_SQUARE' value='5'/>
<enum name='L_ROTATE_AREA_MAP' value='1'/>
<enum name='L_ROTATE_SAMPLING' value='3'/>
<enum name='L_ROTATE_SHEAR' value='2'/>
<enum name='L_RO_SC_TR' value='5'/>
<enum name='L_RO_TR_SC' value='3'/>
<enum name='L_RUN_OFF' value='0'/>
<enum name='L_RUN_ON' value='1'/>
<enum name='L_SAMPLED' value='2'/>
<enum name='L_SC_RO_TR' value='2'/>
<enum name='L_SC_TR_RO' value='6'/>
<enum name='L_SELECT_BLUE' value='3'/>
<enum name='L_SELECT_GREEN' value='2'/>
<enum name='L_SELECT_HEIGHT' value='2'/>
<enum name='L_SELECT_IF_BOTH' value='4'/>
<enum name='L_SELECT_IF_EITHER' value='3'/>
<enum name='L_SELECT_IF_GT' value='2'/>
<enum name='L_SELECT_IF_GTE' value='4'/>
<enum name='L_SELECT_IF_LT' value='1'/>
<enum name='L_SELECT_IF_LTE' value='3'/>
<enum name='L_SELECT_MAX' value='5'/>
<enum name='L_SELECT_MIN' value='4'/>
<enum name='L_SELECT_RED' value='1'/>
<enum name='L_SELECT_WIDTH' value='1'/>
<enum name='L_SET_BLACK' value='2'/>
<enum name='L_SET_PIXELS' value='1'/>
<enum name='L_SET_WHITE' value='1'/>
<enum name='L_SHEAR_ABOUT_CENTER' value='2'/>
<enum name='L_SHEAR_ABOUT_CORNER' value='1'/>
<enum name='L_SOBEL_EDGE' value='1'/>
<enum name='L_SORT_BY_AREA' value='10'/>
<enum name='L_SORT_BY_ASPECT_RATIO' value='11'/>
<enum name='L_SORT_BY_HEIGHT' value='6'/>
<enum name='L_SORT_BY_MAX_DIMENSION' value='8'/>
<enum name='L_SORT_BY_MIN_DIMENSION' value='7'/>
<enum name='L_SORT_BY_PERIMETER' value='9'/>
<enum name='L_SORT_BY_WIDTH' value='5'/>
<enum name='L_SORT_BY_X' value='3'/>
<enum name='L_SORT_BY_Y' value='4'/>
<enum name='L_SORT_DECREASING' value='2'/>
<enum name='L_SORT_INCREASING' value='1'/>
<enum name='L_STANDARD_DEVIATION' value='6'/>
<enum name='L_SUBPIXEL_ORDER_BGR' value='2'/>
<enum name='L_SUBPIXEL_ORDER_RGB' value='1'/>
<enum name='L_SUBPIXEL_ORDER_VBGR' value='4'/>
<enum name='L_SUBPIXEL_ORDER_VRGB' value='3'/>
<enum name='L_SUBTRACTION' value='7'/>
<enum name='L_SUDOKU_INIT' value='0'/>
<enum name='L_SUDOKU_STATE' value='1'/>
<enum name='L_SV_HISTO' value='3'/>
<enum name='L_TAKE_ABSVAL' value='2'/>
<enum name='L_TEXT_ORIENT_DOWN' value='3'/>
<enum name='L_TEXT_ORIENT_LEFT' value='2'/>
<enum name='L_TEXT_ORIENT_RIGHT' value='4'/>
<enum name='L_TEXT_ORIENT_UNKNOWN' value='0'/>
<enum name='L_TEXT_ORIENT_UP' value='1'/>
<enum name='L_THIN_BG' value='2'/>
<enum name='L_THIN_FG' value='1'/>
<enum name='L_TOPHAT_BLACK' value='1'/>
<enum name='L_TOPHAT_WHITE' value='0'/>
<enum name='L_TR_RO_SC' value='4'/>
<enum name='L_TR_SC_RO' value='1'/>
<enum name='L_TWO_SIDED_EDGE' value='2'/>
<enum name='L_UNION' value='5'/>
<enum name='L_USE_WIDTHS' value='1'/>
<enum name='L_USE_WINDOWS' value='2'/>
<enum name='L_VARIANCE' value='7'/>
<enum name='L_VERT' value='2'/>
<enum name='L_VERTICAL_EDGES' value='1'/>
<enum name='L_VERTICAL_LINE' value='2'/>
<enum name='L_VERTICAL_RUNS' value='1'/>
<enum name='L_WARP_TO_LEFT' value='1'/>
<enum name='L_WARP_TO_RIGHT' value='2'/>
<enum name='MAX_FLOAT32' value='3.4028235E+38'/>
<enum name='MAX_FONT_NAME' value='34'/>
<enum name='MAX_INT16' value='32767'/>
<enum name='MAX_INT32' value='2147483647'/>
<enum name='MAX_INT8' value='127'/>
<enum name='MAX_NUM_INT_FEATURES' value='512'/>
<enum name='MAX_OCR_NAME' value='32'/>
<enum name='MAX_OCR_VERSION' value='17'/>
<enum name='MAX_PATH' value='1024'/>
<enum name='MAX_UINT16' value='65535'/>
<enum name='MAX_UINT32' value='4294967295'/>
<enum name='MAX_UINT8' value='255'/>
<enum name='MEMORY_ABORT' value='2'/>
<enum name='MIN_FLOAT32' value='1.1754944E-38'/>
<enum name='MIN_IMAGE_SIZE' value='64'/>
<enum name='MIN_INT16' value='32768'/>
<enum name='MIN_INT32' value='2147483648'/>
<enum name='MIN_INT8' value='128'/>
<enum name='MIN_UINT16' value='0'/>
<enum name='MIN_UINT32' value='0'/>
<enum name='MIN_UINT8' value='0'/>
<enum name='NO_ABORT_CODE' value='0'/>
<enum name='NUMA_VERSION_NUMBER' value='1'/>
<enum name='NUM_GPLOT_OUTPUTS' value='6'/>
<enum name='NUM_GPLOT_STYLES' value='5'/>
<enum name='OCR_API_BAD_CHAR' value='-3'/>
<enum name='OCR_API_BAD_STATE' value='-4'/>
<enum name='OCR_API_NO_MEM' value='-2'/>
<enum name='OCR_CDIR_BOTTOM_TOP' value='3'/>
<enum name='OCR_CDIR_LEFT_RIGHT' value='1'/>
<enum name='OCR_CDIR_RIGHT_LEFT' value='0'/>
<enum name='OCR_CDIR_TOP_BOTTOM' value='2'/>
<enum name='OCR_ERR_BAD_DLL' value='6'/>
<enum name='OCR_ERR_BAD_EXE' value='7'/>
<enum name='OCR_ERR_BAD_LANG' value='9'/>
<enum name='OCR_ERR_BAD_LOAD' value='8'/>
<enum name='OCR_ERR_BAD_STATE' value='10'/>
<enum name='OCR_ERR_CLEAN_EXIT' value='1'/>
<enum name='OCR_ERR_FILE_READ' value='3'/>
<enum name='OCR_ERR_INTERNAL1' value='11'/>
<enum name='OCR_ERR_INTERNAL2' value='12'/>
<enum name='OCR_ERR_INTERNAL3' value='13'/>
<enum name='OCR_ERR_INTERNAL4' value='14'/>
<enum name='OCR_ERR_INTERNAL5' value='15'/>
<enum name='OCR_ERR_INTERNAL6' value='16'/>
<enum name='OCR_ERR_INTERNAL7' value='17'/>
<enum name='OCR_ERR_INTERNAL8' value='18'/>
<enum name='OCR_ERR_NONE' value='0'/>
<enum name='OCR_ERR_NO_MEM' value='2'/>
<enum name='OCR_ERR_TIMEOUT' value='19'/>
<enum name='OCR_ERR_TMP_READ' value='5'/>
<enum name='OCR_ERR_TMP_WRITE' value='4'/>
<enum name='OCR_LDIR_DOWN_RIGHT' value='0'/>
<enum name='OCR_LDIR_UP_LEFT' value='1'/>
<enum name='OCR_NL_NEWLINE' value='1'/>
<enum name='OCR_NL_NEWPARA' value='2'/>
<enum name='OCR_NL_NONE' value='0'/>
<enum name='OKAY' value='0'/>
<enum name='PITCH_DEF' value='0'/>
<enum name='PITCH_FIXED' value='1'/>
<enum name='PITCH_VAR' value='2'/>
<enum name='PIXAA_VERSION_NUMBER' value='2'/>
<enum name='PIXACOMP_VERSION_NUMBER' value='1'/>
<enum name='PIXA_VERSION_NUMBER' value='2'/>
<enum name='PIX_CLR' value='0'/>
<enum name='PIX_DST' value='20'/>
<enum name='PIX_MASK' value='16'/>
<enum name='PIX_PAINT' value='28'/>
<enum name='PIX_SET' value='30'/>
<enum name='PIX_SRC' value='24'/>
<enum name='PIX_SUBTRACT' value='4'/>
<enum name='PIX_XOR' value='12'/>
<enum name='PROGRESS_TIMEOUT' value='3'/>
<enum name='PTA_VERSION_NUMBER' value='1'/>
<enum name='PT_CAPTION_TEXT' value='6'/>
<enum name='PT_COUNT' value='13'/>
<enum name='PT_FLOWING_IMAGE' value='7'/>
<enum name='PT_FLOWING_TEXT' value='1'/>
<enum name='PT_HEADING_IMAGE' value='8'/>
<enum name='PT_HEADING_TEXT' value='2'/>
<enum name='PT_HORZ_LINE' value='10'/>
<enum name='PT_NOISE' value='12'/>
<enum name='PT_PULLOUT_IMAGE' value='9'/>
<enum name='PT_PULLOUT_TEXT' value='3'/>
<enum name='PT_TABLE' value='4'/>
<enum name='PT_UNKNOWN' value='0'/>
<enum name='PT_VERTICAL_TEXT' value='5'/>
<enum name='PT_VERT_LINE' value='11'/>
<enum name='READIM_TIMEOUT' value='10'/>
<enum name='READTEXT_TIMEOUT' value='5'/>
<enum name='RELEASE_TIMEOUT' value='5'/>
<enum name='REMOVE_CMAP_BASED_ON_SRC' value='3'/>
<enum name='REMOVE_CMAP_TO_BINARY' value='0'/>
<enum name='REMOVE_CMAP_TO_FULL_COLOR' value='2'/>
<enum name='REMOVE_CMAP_TO_GRAYSCALE' value='1'/>
<enum name='SARRAY_VERSION_NUMBER' value='1'/>
<enum name='SEL_DONT_CARE' value='0'/>
<enum name='SEL_HIT' value='1'/>
<enum name='SEL_MISS' value='2'/>
<enum name='SEL_VERSION_NUMBER' value='1'/>
<enum name='SENDIM_TIMEOUT' value='5'/>
<enum name='SHUTDOWN_TIMEOUT' value='6'/>
<enum name='SPLIT_ON_BLANK_LINE' value='2'/>
<enum name='SPLIT_ON_BOTH' value='3'/>
<enum name='SPLIT_ON_LEADING_WHITE' value='1'/>
<enum name='STARTUP_TIMEOUT' value='10'/>
<enum name='SUBLOC_FIX_XHT' value='3'/>
<enum name='SUBLOC_NORM' value='0'/>
<enum name='SUBSUBLOC_NN' value='2'/>
<enum name='SUBSUBLOC_OTHER' value='0'/>
<enum name='SUBSUBLOC_TESS' value='1'/>
<enum name='SYMMETRIC_MORPH_BC' value='0'/>
<enum name='TESSEXIT' value='1'/>
<enum name='TESSLOG' value='0'/>
<enum name='TIFF_BIGEND_ID' value='19789'/>
<enum name='TIFF_LITTLEEND_ID' value='18761'/>
<enum name='UNDEF' value='-1'/>
<enum name='UNICHAR_LEN' value='24'/>
<enum name='USE_BMPIO' value='1'/>
<enum name='USE_INLINE_ACCESSORS' value='1'/>
<enum name='USE_PDFIO' value='1'/>
<enum name='USE_PNMIO' value='1'/>
<enum name='USE_PSIO' value='1'/>
<function name='PTIsImageType' inline='true'>
<arg name='type' declared_type='enum PolyBlockType' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='PTIsLineType' inline='true'>
<arg name='type' declared_type='enum PolyBlockType' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='PTIsTextType' inline='true'>
<arg name='type' declared_type='enum PolyBlockType' type='i'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='RoundUp' inline='true'>
<arg name='n' declared_type='int' type='i'/>
<arg name='block_size' declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='SkipNewline' inline='true'>
<arg name='file' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='absDifferenceLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas1' declared_type='l_uint32*' type='^I'/>
<arg name='datas2' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='accumulateLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='addColorizedGrayToCmap'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pna' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='addConstantGrayLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='addGrayLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='adjacentOnPixelInRaster'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxa' declared_type='l_int32*' type='^i'/>
<arg name='pya' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineInvertXform'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='pvci' declared_type='l_float32**' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineXformPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_float32*' type='^f'/>
<arg name='pyp' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='affineXformSampledPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_int32*' type='^i'/>
<arg name='pyp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyCubicFit'>
<arg name='a' declared_type='l_float32' type='f'/>
<arg name='b' declared_type='l_float32' type='f'/>
<arg name='c' declared_type='l_float32' type='f'/>
<arg name='d' declared_type='l_float32' type='f'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyLinearFit'>
<arg name='a' declared_type='l_float32' type='f'/>
<arg name='b' declared_type='l_float32' type='f'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyQuadraticFit'>
<arg name='a' declared_type='l_float32' type='f'/>
<arg name='b' declared_type='l_float32' type='f'/>
<arg name='c' declared_type='l_float32' type='f'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='applyQuarticFit'>
<arg name='a' declared_type='l_float32' type='f'/>
<arg name='b' declared_type='l_float32' type='f'/>
<arg name='c' declared_type='l_float32' type='f'/>
<arg name='d' declared_type='l_float32' type='f'/>
<arg name='e' declared_type='l_float32' type='f'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='arrayFindEachSequence'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='datalen' declared_type='l_int32' type='i'/>
<arg name='sequence' const='true' declared_type='l_uint8*' type='*'/>
<arg name='seqlen' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='arrayFindSequence'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='datalen' declared_type='l_int32' type='i'/>
<arg name='sequence' const='true' declared_type='l_uint8*' type='*'/>
<arg name='seqlen' declared_type='l_int32' type='i'/>
<arg name='poffset' declared_type='l_int32*' type='^i'/>
<arg name='pfound' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='arrayRead'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='arrayReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='barcodeDispatchDecoder'>
<arg name='barstr' declared_type='char*' type='*'/>
<arg name='format' declared_type='l_int32' type='i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='barcodeFormatIsSupported'>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferBytesToWrite'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferCreate'>
<arg name='indata' declared_type='l_uint8*' type='*'/>
<arg name='nalloc' declared_type='l_int32' type='i'/>
<retval declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
</function>
<function name='bbufferDestroy'>
<arg name='pbb' declared_type='BBUFFER**' type='^^{ByteBuffer}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bbufferDestroyAndSaveData'>
<arg name='pbb' declared_type='BBUFFER**' type='^^{ByteBuffer}'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='bbufferExtendArray'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='nbytes' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferRead'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='src' declared_type='l_uint8*' type='*'/>
<arg name='nbytes' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferReadStream'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='nbytes' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferWrite'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='dest' declared_type='l_uint8*' type='*'/>
<arg name='nbytes' declared_type='size_t' type='L'/>
<arg name='pnout' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bbufferWriteStream'>
<arg name='bb' declared_type='BBUFFER*' type='^{ByteBuffer=iii*}'/>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='nbytes' declared_type='size_t' type='L'/>
<arg name='pnout' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bilinearXformPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_float32*' type='^f'/>
<arg name='pyp' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bilinearXformSampledPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_int32*' type='^i'/>
<arg name='pyp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='blockconvAccumLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='blockconvLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='dataa' declared_type='l_uint32*' type='^I'/>
<arg name='wpla' declared_type='l_int32' type='i'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='blocksumLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='dataa' declared_type='l_uint32*' type='^I'/>
<arg name='wpla' declared_type='l_int32' type='i'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bmfCreate'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
</function>
<function name='bmfDestroy'>
<arg name='pbmf' declared_type='L_BMF**' type='^^{L_Bmf}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bmfGetBaseline'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='chr' declared_type='char' type='c'/>
<arg name='pbaseline' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetLineStrings'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='maxw' declared_type='l_int32' type='i'/>
<arg name='firstindent' declared_type='l_int32' type='i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='bmfGetPix'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='chr' declared_type='char' type='c'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='bmfGetStringWidth'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetWidth'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='chr' declared_type='char' type='c'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='bmfGetWordWidths'>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='boxAdjustSides'>
<arg name='boxd' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='boxs' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='delleft' declared_type='l_int32' type='i'/>
<arg name='delright' declared_type='l_int32' type='i'/>
<arg name='deltop' declared_type='l_int32' type='i'/>
<arg name='delbot' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxBoundingRegion'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxChangeRefcount'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxClipToRectangle'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='wi' declared_type='l_int32' type='i'/>
<arg name='hi' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxClone'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxContains'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='presult' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxContainsPt'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='y' declared_type='l_float32' type='f'/>
<arg name='pcontains' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxCopy'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxCreate'>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxCreateValid'>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxDestroy'>
<arg name='pbox' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxEqual'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetCenter'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pcx' declared_type='l_float32*' type='^f'/>
<arg name='pcy' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetGeometry'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxGetRefcount'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxIntersectByLine'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='slope' declared_type='l_float32' type='f'/>
<arg name='px1' declared_type='l_int32*' type='^i'/>
<arg name='py1' declared_type='l_int32*' type='^i'/>
<arg name='px2' declared_type='l_int32*' type='^i'/>
<arg name='py2' declared_type='l_int32*' type='^i'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxIntersects'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='presult' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxOverlapFraction'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxOverlapRegion'>
<arg name='box1' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='box2' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxPrintStreamInfo'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxRelocateOneSide'>
<arg name='boxd' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='boxs' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='loc' declared_type='l_int32' type='i'/>
<arg name='sideflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxRotateOrth'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='rotation' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxSetGeometry'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxTransform'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='shiftx' declared_type='l_int32' type='i'/>
<arg name='shifty' declared_type='l_int32' type='i'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxTransformOrdered'>
<arg name='boxs' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='shiftx' declared_type='l_int32' type='i'/>
<arg name='shifty' declared_type='l_int32' type='i'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='order' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaAddBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaAffineTransform'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='mat' declared_type='l_float32*' type='^f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaBinSort'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='sorttype' declared_type='l_int32' type='i'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaClear'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaClipToBox'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaCombineOverlaps'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaContainedInBox'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaConvertToPta'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='ncorners' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='boxaCopy'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaDestroy'>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxaEqual'>
<arg name='boxa1' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='boxa2' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='maxdist' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtendArray'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtendArrayToSize'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaExtractSortedPattern'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='boxaGetBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetBoxGeometry'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetCount'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetCoverage'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='exactflag' declared_type='l_int32' type='i'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetExtent'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbox' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetMedian'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetNearestToPt'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetRankSize'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetValidBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='boxaGetValidCount'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaGetWhiteblocks'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='sortflag' declared_type='l_int32' type='i'/>
<arg name='maxboxes' declared_type='l_int32' type='i'/>
<arg name='maxoverlap' declared_type='l_float32' type='f'/>
<arg name='maxperim' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='maxpops' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaInitFull'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaInsertBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaIntersectsBox'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaJoin'>
<arg name='boxad' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='istart' declared_type='l_int32' type='i'/>
<arg name='iend' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaLocationRange'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pminx' declared_type='l_int32*' type='^i'/>
<arg name='pminy' declared_type='l_int32*' type='^i'/>
<arg name='pmaxx' declared_type='l_int32*' type='^i'/>
<arg name='pmaxy' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaMakeSizeIndicator'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='relation' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='boxaPermutePseudorandom'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaPermuteRandom'>
<arg name='boxad' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaPruneSortedOnOverlap'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='maxoverlap' declared_type='l_float32' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRemoveBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaReplaceBox'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaRotate'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='xc' declared_type='l_float32' type='f'/>
<arg name='yc' declared_type='l_float32' type='f'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaRotateOrth'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='rotation' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaScale'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSelectBySize'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='relation' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSelectWithIndicator'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSizeRange'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pminw' declared_type='l_int32*' type='^i'/>
<arg name='pminh' declared_type='l_int32*' type='^i'/>
<arg name='pmaxw' declared_type='l_int32*' type='^i'/>
<arg name='pmaxh' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaSort'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='sorttype' declared_type='l_int32' type='i'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSort2d'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pnaad' declared_type='NUMAA**' type='^^{Numaa}'/>
<arg name='delta1' declared_type='l_int32' type='i'/>
<arg name='delta2' declared_type='l_int32' type='i'/>
<arg name='minh1' declared_type='l_int32' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaSort2dByIndex'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaSortByIndex'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='naindex' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaSwapBoxes'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='i' declared_type='l_int32' type='i'/>
<arg name='j' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaTransform'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='shiftx' declared_type='l_int32' type='i'/>
<arg name='shifty' declared_type='l_int32' type='i'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaTransformOrdered'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='shiftx' declared_type='l_int32' type='i'/>
<arg name='shifty' declared_type='l_int32' type='i'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='order' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaTranslate'>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='transx' declared_type='l_float32' type='f'/>
<arg name='transy' declared_type='l_float32' type='f'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAddBox'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAddBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='ba' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaAlignBox'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaCopy'>
<arg name='baas' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaDestroy'>
<arg name='pbaa' declared_type='BOXAA**' type='^^{Boxaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='boxaaDisplay'>
<arg name='boxaa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='linewba' declared_type='l_int32' type='i'/>
<arg name='linewb' declared_type='l_int32' type='i'/>
<arg name='colorba' declared_type='l_uint32' type='I'/>
<arg name='colorb' declared_type='l_uint32' type='I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='boxaaExtendArray'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaFlattenToBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaaGetBoxCount'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaGetBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='boxaaGetCount'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaGetExtent'>
<arg name='boxaa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbox' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaInsertBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaQuadtreeRegions'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
</function>
<function name='boxaaRemoveBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaReplaceBoxa'>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='boxaaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbCreate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='ccbDestroy'>
<arg name='pccb' declared_type='CCBORD**' type='^^{CCBord}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccbaAddCcb'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg name='ccb' declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaCreate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaDestroy'>
<arg name='pccba' declared_type='CCBORDA**' type='^^{CCBorda}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ccbaDisplayBorder'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplayImage1'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplayImage2'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaDisplaySPBorder'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='ccbaExtendArray'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateGlobalLocs'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateSPGlobalLocs'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg name='ptsflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateSinglePath'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGenerateStepChains'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaGetCcb'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='ccbaGetCount'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='ccbaStepChainsToPixCoords'>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<arg name='coordtype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWriteSVG'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ccbaWriteSVGString'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='ccbaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='ccba' declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='chomp_string' inline='true'>
<arg name='str' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='composeRGBPixel'>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='ppixel' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='compressed_dataDestroy'>
<arg name='pcid' declared_type='L_COMPRESSED_DATA**' type='^^{L_Compressed_Data}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='concatenatePdf'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='concatenatePdfToData'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertByteToHexAscii'>
<arg name='byteval' declared_type='l_uint8' type='C'/>
<arg name='pnib1' declared_type='char*' type='*'/>
<arg name='pnib2' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='convertFilesFittedToPS'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='xpts' declared_type='l_float32' type='f'/>
<arg name='ypts' declared_type='l_float32' type='f'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesTo1bpp'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='upscaling' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='firstpage' declared_type='l_int32' type='i'/>
<arg name='npages' declared_type='l_int32' type='i'/>
<arg name='dirout' const='true' declared_type='char*' type='*'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesToPS'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFilesToPdf'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='operation' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPSEmbed'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertFlateToPSString'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='poutstr' declared_type='char**' type='^*'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='operation' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='maskflag' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPSEmbed'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertG4ToPSString'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='poutstr' declared_type='char**' type='^*'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='maskflag' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertHSVToRGB'>
<arg name='hval' declared_type='l_int32' type='i'/>
<arg name='sval' declared_type='l_int32' type='i'/>
<arg name='vval' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertImageDataToPdf'>
<arg name='imdata' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertImageDataToPdfData'>
<arg name='imdata' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='operation' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPSEmbed'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertJpegToPSString'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='poutstr' declared_type='char**' type='^*'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertOnBigEnd16'>
<arg name='shortin' declared_type='l_uint16' type='S'/>
<retval declared_type='l_uint16' type='S'/>
</function>
<function name='convertOnBigEnd32'>
<arg name='wordin' declared_type='l_uint32' type='I'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='convertOnLittleEnd16'>
<arg name='shortin' declared_type='l_uint16' type='S'/>
<retval declared_type='l_uint16' type='S'/>
</function>
<function name='convertOnLittleEnd32'>
<arg name='wordin' declared_type='l_uint32' type='I'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='convertRGBToHSV'>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='phval' declared_type='l_int32*' type='^i'/>
<arg name='psval' declared_type='l_int32*' type='^i'/>
<arg name='pvval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertRGBToYUV'>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pyval' declared_type='l_int32*' type='^i'/>
<arg name='puval' declared_type='l_int32*' type='^i'/>
<arg name='pvval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertSegmentedFilesToPdf'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='baa' declared_type='BOXAA*' type='^{Boxaa=ii^^{Boxa}}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertSegmentedPagesToPS'>
<arg name='pagedir' const='true' declared_type='char*' type='*'/>
<arg name='pagestr' const='true' declared_type='char*' type='*'/>
<arg name='maskdir' const='true' declared_type='char*' type='*'/>
<arg name='maskstr' const='true' declared_type='char*' type='*'/>
<arg name='numpre' declared_type='l_int32' type='i'/>
<arg name='numpost' declared_type='l_int32' type='i'/>
<arg name='maxnum' declared_type='l_int32' type='i'/>
<arg name='textscale' declared_type='l_float32' type='f'/>
<arg name='imagescale' declared_type='l_float32' type='f'/>
<arg name='threshold' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertTiffMultipageToPS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='tempfile' const='true' declared_type='char*' type='*'/>
<arg name='fillfract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPSEmbed'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='level' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdf'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfData'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfDataSegmented'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertToPdfSegmented'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='convertYUVToRGB'>
<arg name='yval' declared_type='l_int32' type='i'/>
<arg name='uval' declared_type='l_int32' type='i'/>
<arg name='vval' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='create2dFloatArray'>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<retval declared_type='l_float32**' type='^^f'/>
</function>
<function name='create2dIntArray'>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32**' type='^^i'/>
</function>
<function name='createMatrix2dRotate'>
<arg name='xc' declared_type='l_float32' type='f'/>
<arg name='yc' declared_type='l_float32' type='f'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='createMatrix2dScale'>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='createMatrix2dTranslate'>
<arg name='transx' declared_type='l_float32' type='f'/>
<arg name='transy' declared_type='l_float32' type='f'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='decodeAscii85'>
<arg name='ina' declared_type='char*' type='*'/>
<arg name='insize' declared_type='l_int32' type='i'/>
<arg name='poutsize' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='dewarpApplyDisparity'>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpBuildModel'>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpCreate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='sampling' declared_type='l_int32' type='i'/>
<arg name='minlines' declared_type='l_int32' type='i'/>
<arg name='applyhoriz' declared_type='l_int32' type='i'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
</function>
<function name='dewarpDestroy'>
<arg name='pdew' declared_type='L_DEWARP**' type='^^{L_Dewarp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dewarpMinimize'>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpPopulateFullRes'>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
</function>
<function name='dewarpReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
</function>
<function name='dewarpWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dewarpWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='dew' declared_type='L_DEWARP*' type='^{L_Dewarp=^{Pix}^{Pix}^{FPix}^{FPix}^{FPix}^{FPix}^{Numa}^{Numa}iiiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dilateGrayLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='buffer' declared_type='l_uint8*' type='*'/>
<arg name='maxarray' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='displayHSVColorRange'>
<arg name='hval' declared_type='l_int32' type='i'/>
<arg name='sval' declared_type='l_int32' type='i'/>
<arg name='vval' declared_type='l_int32' type='i'/>
<arg name='huehw' declared_type='l_int32' type='i'/>
<arg name='sathw' declared_type='l_int32' type='i'/>
<arg name='nsamp' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='distanceFunctionLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherTo2bppLineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='tabval' declared_type='l_int32*' type='^i'/>
<arg name='tab38' declared_type='l_int32*' type='^i'/>
<arg name='tab14' declared_type='l_int32*' type='^i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherTo2bppLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='tabval' declared_type='l_int32*' type='^i'/>
<arg name='tab38' declared_type='l_int32*' type='^i'/>
<arg name='tab14' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLUTLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='tabval' declared_type='l_int32*' type='^i'/>
<arg name='tab38' declared_type='l_int32*' type='^i'/>
<arg name='tab14' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLineLUTLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='tabval' declared_type='l_int32*' type='^i'/>
<arg name='tab38' declared_type='l_int32*' type='^i'/>
<arg name='tab14' declared_type='l_int32*' type='^i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ditherToBinaryLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='bufs1' declared_type='l_uint32*' type='^I'/>
<arg name='bufs2' declared_type='l_uint32*' type='^I'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dpixChangeRefcount'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixClone'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixConvertToFPix'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='dpixCopy'>
<arg name='dpixd' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixCopyResolution'>
<arg name='dpixd' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixCreate'>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixCreateTemplate'>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixDestroy'>
<arg name='pdpix' declared_type='DPIX**' type='^^{DPix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='dpixEndianByteSwap'>
<arg name='dpixd' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixGetData'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_float64*' type='^d'/>
</function>
<function name='dpixGetDimensions'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetPixel'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float64*' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetRefcount'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetResolution'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixGetWpl'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixResizeImageData'>
<arg name='dpixd' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixScaleByInteger'>
<arg name='dpixs' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='dpixSetData'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='data' declared_type='l_float64*' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetDimensions'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetPixel'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float64' type='d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetResolution'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='xres' declared_type='l_int32' type='i'/>
<arg name='yres' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixSetWpl'>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='dpixWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='dpix' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='encodeAscii85'>
<arg name='inarray' declared_type='l_uint8*' type='*'/>
<arg name='insize' declared_type='l_int32' type='i'/>
<arg name='poutsize' declared_type='l_int32*' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='erodeGrayLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='buffer' declared_type='l_uint8*' type='*'/>
<arg name='minarray' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='expandBinaryPower2Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractG4DataFromFile'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pminisblack' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractJpegDataFromArray'>
<arg name='data' const='true' declared_type='void*' type='^v'/>
<arg name='nbytes' declared_type='size_t' type='L'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractJpegDataFromFile'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractMinMaxComponent'>
<arg name='pixel' declared_type='l_uint32' type='I'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractNumberFromFilename'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='numpre' declared_type='l_int32' type='i'/>
<arg name='numpost' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='extractRGBValues'>
<arg name='pixel' declared_type='l_uint32' type='I'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fgetJpegResolution'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fgetPngResolution'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen1'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtautogen2'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fhmtgen_low_1'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileAppendString'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='str' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileConcatenate'>
<arg name='srcfile' const='true' declared_type='char*' type='*'/>
<arg name='destfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileCopy'>
<arg name='srcfile' const='true' declared_type='char*' type='*'/>
<arg name='newfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fileFormatIsTiff'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='filesAreIdentical'>
<arg name='fname1' const='true' declared_type='char*' type='*'/>
<arg name='fname2' const='true' declared_type='char*' type='*'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='finalAccumulateLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='finalAccumulateThreshLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<arg name='threshold' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='findFileFormat'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findFileFormatBuffer'>
<arg name='buf' const='true' declared_type='l_uint8*' type='*'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findFileFormatStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findNextBorderPixel'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32' type='i'/>
<arg name='py' declared_type='l_int32' type='i'/>
<arg name='pqpos' declared_type='l_int32*' type='^i'/>
<arg name='pnpx' declared_type='l_int32*' type='^i'/>
<arg name='pnpy' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='findTiffCompression'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pcomptype' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='flipLRLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_uint8*' type='*'/>
<arg name='buffer' declared_type='l_uint32*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='flipTBLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='buffer' declared_type='l_uint32*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fmorphautogen'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphautogen1'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphautogen2'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='fileindex' declared_type='l_int32' type='i'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphopgen_low_1'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fmorphopgen_low_2'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fnbytesInFile'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='fopenReadStream'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='fopenWriteStream'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='modestring' const='true' declared_type='char*' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='fpixAddBorder'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixAddMirroredBorder'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixAddMultConstant'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='addc' declared_type='l_float32' type='f'/>
<arg name='multc' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixBuildHorizontalDisparity'>
<arg name='fpixv' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='pextraw' declared_type='l_int32*' type='^i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixChangeRefcount'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixClone'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixConvertToDPix'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='fpixConvertToPix'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='negvals' declared_type='l_int32' type='i'/>
<arg name='errorflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixConvolve'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='normflag' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixConvolveSep'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='kelx' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='kely' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='normflag' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixCopy'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixCopyResolution'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixCreate'>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixCreateTemplate'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixDestroy'>
<arg name='pfpix' declared_type='FPIX**' type='^^{FPix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fpixDisplayMaxDynamicRange'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixEndianByteSwap'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixGetData'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='fpixGetDimensions'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetMax'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='pmaxval' declared_type='l_float32*' type='^f'/>
<arg name='pxmaxloc' declared_type='l_int32*' type='^i'/>
<arg name='pymaxloc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetMin'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='pminval' declared_type='l_float32*' type='^f'/>
<arg name='pxminloc' declared_type='l_int32*' type='^i'/>
<arg name='pyminloc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetPixel'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetRefcount'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetResolution'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixGetWpl'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixLinearCombination'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs1' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs2' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='a' declared_type='l_float32' type='f'/>
<arg name='b' declared_type='l_float32' type='f'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixPrintStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixRasterop'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='dx' declared_type='l_int32' type='i'/>
<arg name='dy' declared_type='l_int32' type='i'/>
<arg name='dw' declared_type='l_int32' type='i'/>
<arg name='dh' declared_type='l_int32' type='i'/>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixRemoveBorder'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixRenderContours'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='startval' declared_type='l_float32' type='f'/>
<arg name='incr' declared_type='l_float32' type='f'/>
<arg name='proxim' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixResizeImageData'>
<arg name='fpixd' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSampledDisparity'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='sampling' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixScaleByInteger'>
<arg name='fpixs' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixSetData'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='data' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetDimensions'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetPixel'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetResolution'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='xres' declared_type='l_int32' type='i'/>
<arg name='yres' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixSetWpl'>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaAddFPix'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaChangeRefcount'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaCopy'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
</function>
<function name='fpixaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
</function>
<function name='fpixaDestroy'>
<arg name='pfpixa' declared_type='FPIXA**' type='^^{FPixa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='fpixaDisplayQuadtree'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='fpixaExtendArray'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaExtendArrayToSize'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetCount'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetFPix'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='fpixaGetFPixDimensions'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaGetPixel'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fpixaSetPixel'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='fprintTiffInfo'>
<arg name='fpout' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='tiffile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderJpeg'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pycck' declared_type='l_int32*' type='^i'/>
<arg name='pcmyk' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderPng'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderPnm'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='ppix' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pdepth' declared_type='l_int32*' type='^i'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderSpix'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='freadHeaderTiff'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pres' declared_type='l_int32*' type='^i'/>
<arg name='pcmap' declared_type='l_int32*' type='^i'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gaussjordan'>
<arg name='a' declared_type='l_float32**' type='^^f'/>
<arg name='b' declared_type='l_float32*' type='^f'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='genPathname'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='genRandomIntegerInRange'>
<arg name='range' declared_type='l_int32' type='i'/>
<arg name='seed' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='genTempFilename'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='tail' const='true' declared_type='char*' type='*'/>
<arg name='usetime' declared_type='l_int32' type='i'/>
<arg name='usepid' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateBinaryMaze'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='xi' declared_type='l_int32' type='i'/>
<arg name='yi' declared_type='l_int32' type='i'/>
<arg name='wallps' declared_type='l_float32' type='f'/>
<arg name='ranis' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='generateFlatePS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='cid' declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg name='xpt' declared_type='l_float32' type='f'/>
<arg name='ypt' declared_type='l_float32' type='f'/>
<arg name='wpt' declared_type='l_float32' type='f'/>
<arg name='hpt' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateG4PS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='cid' declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg name='xpt' declared_type='l_float32' type='f'/>
<arg name='ypt' declared_type='l_float32' type='f'/>
<arg name='wpt' declared_type='l_float32' type='f'/>
<arg name='hpt' declared_type='l_float32' type='f'/>
<arg name='maskflag' declared_type='l_int32' type='i'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generateJpegPS'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='cid' declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
<arg name='xpt' declared_type='l_float32' type='f'/>
<arg name='ypt' declared_type='l_float32' type='f'/>
<arg name='wpt' declared_type='l_float32' type='f'/>
<arg name='hpt' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='endpage' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='generatePtaBox'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaBoxa'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='removedups' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaFilledCircle'>
<arg name='radius' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaHashBox'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='orient' declared_type='l_int32' type='i'/>
<arg name='outline' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaLine'>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaLineFromPt'>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='length' declared_type='l_float64' type='d'/>
<arg name='radang' declared_type='l_float64' type='d'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaPolyline'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='closeflag' declared_type='l_int32' type='i'/>
<arg name='removedups' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaWideLine'>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='generatePtaaBoxa'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='generatePtaaHashBoxa'>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='orient' declared_type='l_int32' type='i'/>
<arg name='outline' declared_type='l_int32' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='generateUncompressedPS'>
<arg name='hexdata' declared_type='char*' type='*'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='psbpl' declared_type='l_int32' type='i'/>
<arg name='bps' declared_type='l_int32' type='i'/>
<arg name='xpt' declared_type='l_float32' type='f'/>
<arg name='ypt' declared_type='l_float32' type='f'/>
<arg name='wpt' declared_type='l_float32' type='f'/>
<arg name='hpt' declared_type='l_float32' type='f'/>
<arg name='boxflag' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='getAffineXformCoeffs'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pvc' declared_type='l_float32**' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getBilinearXformCoeffs'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pvc' declared_type='l_float32**' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getCompositeParameters'>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='psize1' declared_type='l_int32*' type='^i'/>
<arg name='psize2' declared_type='l_int32*' type='^i'/>
<arg name='pnameh1' declared_type='char**' type='^*'/>
<arg name='pnameh2' declared_type='char**' type='^*'/>
<arg name='pnamev1' declared_type='char**' type='^*'/>
<arg name='pnamev2' declared_type='char**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getCutPathForHole'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='boxinner' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pdir' declared_type='l_int32*' type='^i'/>
<arg name='plen' declared_type='l_int32*' type='^i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='getExtendedCompositeParameters'>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<arg name='pextra' declared_type='l_int32*' type='^i'/>
<arg name='pactualsize' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getFilenamesInDirectory'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getFormatExtension'>
<arg name='format' declared_type='l_int32' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='getImagelibVersions'>
<retval declared_type='char*' type='*'/>
</function>
<function name='getImpliedFileFormat'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getLeptonicaVersion'>
<retval declared_type='char*' type='*'/>
</function>
<function name='getLogBase2'>
<arg name='val' declared_type='l_int32' type='i'/>
<arg name='logtab' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='getMorphBorderPixelColor'>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='l_uint32' type='I'/>
</function>
<function name='getNumberedPathnamesInDirectory'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='numpre' declared_type='l_int32' type='i'/>
<arg name='numpost' declared_type='l_int32' type='i'/>
<arg name='maxnum' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getOctcubeIndexFromRGB'>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='rtab' declared_type='l_uint32*' type='^I'/>
<arg name='gtab' declared_type='l_uint32*' type='^I'/>
<arg name='btab' declared_type='l_uint32*' type='^I'/>
<arg name='pindex' declared_type='l_uint32*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='getProjectiveXformCoeffs'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pvc' declared_type='l_float32**' type='^^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getResA4Page'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='fillfract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getResLetterPage'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='fillfract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='getScaledParametersPS'>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='wpix' declared_type='l_int32' type='i'/>
<arg name='hpix' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pxpt' declared_type='l_float32*' type='^f'/>
<arg name='pypt' declared_type='l_float32*' type='^f'/>
<arg name='pwpt' declared_type='l_float32*' type='^f'/>
<arg name='phpt' declared_type='l_float32*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='getSortedPathnamesInDirectory'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='firstpage' declared_type='l_int32' type='i'/>
<arg name='npages' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='getTiffResolution'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotAddPlot'>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='plotstyle' declared_type='l_int32' type='i'/>
<arg name='plottitle' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotCreate'>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='xlabel' const='true' declared_type='char*' type='*'/>
<arg name='ylabel' const='true' declared_type='char*' type='*'/>
<retval declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
</function>
<function name='gplotDestroy'>
<arg name='pgplot' declared_type='GPLOT**' type='^^{GPlot}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gplotGenCommandFile'>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotGenDataFiles'>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotMakeOutput'>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
</function>
<function name='gplotSetScaling'>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<arg name='scaling' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimple1'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<arg name='outroot' const='true' declared_type='char*' type='*'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimple2'>
<arg name='na1' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='na2' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<arg name='outroot' const='true' declared_type='char*' type='*'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotSimpleN'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<arg name='outroot' const='true' declared_type='char*' type='*'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='gplotWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='gplot' declared_type='GPLOT*' type='^{GPlot=**^{Sarray}^{Sarray}^{Sarray}^{Sarray}^{Numa}i*ii***}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ioFormatTest'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbAccumulateComposites'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='pna' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pptat' declared_type='PTA**' type='^^{Pta}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbAddPage'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbAddPageComponents'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxas' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbAddPages'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='safiles' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbClasserCreate'>
<arg name='method' declared_type='l_int32' type='i'/>
<arg name='components' declared_type='l_int32' type='i'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbClasserDestroy'>
<arg name='pclasser' declared_type='JBCLASSER**' type='^^{JbClasser}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='jbClassifyCorrelation'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbClassifyRankHaus'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbCorrelation'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='weight' declared_type='l_float32' type='f'/>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<arg name='firstpage' declared_type='l_int32' type='i'/>
<arg name='npages' declared_type='l_int32' type='i'/>
<arg name='renderflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbCorrelationInit'>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='weightfactor' declared_type='l_float32' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbCorrelationInitWithoutComponents'>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='weightfactor' declared_type='l_float32' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbDataDestroy'>
<arg name='pdata' declared_type='JBDATA**' type='^^{JbData}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='jbDataRead'>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<retval declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
</function>
<function name='jbDataRender'>
<arg name='data' declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbDataSave'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<retval declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
</function>
<function name='jbDataWrite'>
<arg name='rootout' const='true' declared_type='char*' type='*'/>
<arg name='jbdata' declared_type='JBDATA*' type='^{JbData=^{Pix}iiiiii^{Numa}^{Numa}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetComponents'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='pboxad' declared_type='BOXA**' type='^^{Boxa}'/>
<arg name='ppixad' declared_type='PIXA**' type='^^{Pixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetLLCorners'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbGetULCorners'>
<arg name='classer' declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbRankHaus'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<arg name='firstpage' declared_type='l_int32' type='i'/>
<arg name='npages' declared_type='l_int32' type='i'/>
<arg name='renderflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='jbRankHausInit'>
<arg name='components' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='jbTemplatesFromComposites'>
<arg name='pixac' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='jbWordsInTextlines'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='weight' declared_type='l_float32' type='f'/>
<arg name='pnatl' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='firstpage' declared_type='l_int32' type='i'/>
<arg name='npages' declared_type='l_int32' type='i'/>
<retval declared_type='JBCLASSER*' type='^{JbClasser=^{Sarray}iiiiii^{Numa}ifff^{Numa}iiii^{Pixaa}^{Pixa}^{Pixa}^{NumaHash}^{Numa}^{Pta}^{Pta}^{Numa}^{Numa}^{Pta}^{Pta}}'/>
</function>
<function name='kernelCopy'>
<arg name='kels' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreate'>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromFile'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromPix'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelCreateFromString'>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<arg name='kdata' const='true' declared_type='char*' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelDestroy'>
<arg name='pkel' declared_type='L_KERNEL**' type='^^{L_Kernel}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='kernelDisplayInPix'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='gthick' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='kernelGetElement'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetMinMax'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='pmin' declared_type='l_float32*' type='^f'/>
<arg name='pmax' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetParameters'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='psy' declared_type='l_int32*' type='^i'/>
<arg name='psx' declared_type='l_int32*' type='^i'/>
<arg name='pcy' declared_type='l_int32*' type='^i'/>
<arg name='pcx' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelGetSum'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='psum' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelInvert'>
<arg name='kels' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelNormalize'>
<arg name='kels' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='normsum' declared_type='l_float32' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelRead'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='kernelSetElement'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelSetOrigin'>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelWrite'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='kernelWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_binaryCopy'>
<arg name='datas' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_binaryWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='operation' const='true' declared_type='char*' type='*'/>
<arg name='data' declared_type='void*' type='^v'/>
<arg name='nbytes' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaAppendData'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='newdata' declared_type='l_uint8*' type='*'/>
<arg name='newbytes' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaAppendString'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='str' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaCopy'>
<arg name='bas' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaCopyData'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_byteaCreate'>
<arg name='nbytes' declared_type='size_t' type='L'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaDestroy'>
<arg name='pba' declared_type='L_BYTEA**' type='^^{L_Bytea}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_byteaExtendArrayToSize'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaFindEachSequence'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='sequence' declared_type='l_uint8*' type='*'/>
<arg name='seqlen' declared_type='l_int32' type='i'/>
<arg name='pna' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaGetData'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='l_byteaGetSize'>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='l_byteaInitFromFile'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaInitFromMem'>
<arg name='data' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaInitFromStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
</function>
<function name='l_byteaJoin'>
<arg name='ba1' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='pba2' declared_type='L_BYTEA**' type='^^{L_Bytea}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaSplit'>
<arg name='ba1' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='splitloc' declared_type='size_t' type='L'/>
<arg name='pba2' declared_type='L_BYTEA**' type='^^{L_Bytea}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaWrite'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='startloc' declared_type='size_t' type='L'/>
<arg name='endloc' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_byteaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='ba' declared_type='L_BYTEA*' type='^{L_Bytea=IIi*}'/>
<arg name='startloc' declared_type='size_t' type='L'/>
<arg name='endloc' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_chooseDisplayProg'>
<arg name='selection' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataBit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataDibit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_clearDataQbit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_error'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorFloat'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorInt'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_errorString'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='str' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_generateFlateData'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_generateG4Data'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_generateJpegData'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='l_getCurrentTime'>
<arg name='sec' declared_type='l_int32*' type='^i'/>
<arg name='usec' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_getDataBit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataByte'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataDibit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataFourBytes'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataQbit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getDataTwoBytes'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_getFormattedDate'>
<retval declared_type='char*' type='*'/>
</function>
<function name='l_info'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoFloat'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoFloat2'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval1' declared_type='l_float32' type='f'/>
<arg name='fval2' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoInt'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoInt2'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival1' declared_type='l_int32' type='i'/>
<arg name='ival2' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_infoString'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='str' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_jpegSetNoChromaSampling'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pdfSetDateAndVersion'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pdfSetG4ImageMask'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetStrip16To8'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetStripAlpha'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetWriteAlpha'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_pngSetZlibCompression'>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_productMat2'>
<arg name='mat1' declared_type='l_float32*' type='^f'/>
<arg name='mat2' declared_type='l_float32*' type='^f'/>
<arg name='matd' declared_type='l_float32*' type='^f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMat3'>
<arg name='mat1' declared_type='l_float32*' type='^f'/>
<arg name='mat2' declared_type='l_float32*' type='^f'/>
<arg name='mat3' declared_type='l_float32*' type='^f'/>
<arg name='matd' declared_type='l_float32*' type='^f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMat4'>
<arg name='mat1' declared_type='l_float32*' type='^f'/>
<arg name='mat2' declared_type='l_float32*' type='^f'/>
<arg name='mat3' declared_type='l_float32*' type='^f'/>
<arg name='mat4' declared_type='l_float32*' type='^f'/>
<arg name='matd' declared_type='l_float32*' type='^f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_productMatVec'>
<arg name='mat' declared_type='l_float32*' type='^f'/>
<arg name='vecs' declared_type='l_float32*' type='^f'/>
<arg name='vecd' declared_type='l_float32*' type='^f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='l_psWriteBoundingBox'>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setAlphaMaskBorder'>
<arg name='val1' declared_type='l_float32' type='f'/>
<arg name='val2' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setConvolveSampling'>
<arg name='xfact' declared_type='l_int32' type='i'/>
<arg name='yfact' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataBit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataBitVal'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataByte'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataDibit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataFourBytes'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataQbit'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_setDataTwoBytes'>
<arg name='line' declared_type='void*' type='^v'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warning'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningFloat'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningFloat2'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval1' declared_type='l_float32' type='f'/>
<arg name='fval2' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningInt'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningInt2'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival1' declared_type='l_int32' type='i'/>
<arg name='ival2' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='l_warningString'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='str' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lept_calloc'>
<arg name='nmemb' declared_type='size_t' type='L'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lept_cp'>
<arg name='srcfile' const='true' declared_type='char*' type='*'/>
<arg name='newfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_fclose'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_fopen'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='mode' const='true' declared_type='char*' type='*'/>
<retval declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='lept_free'>
<arg name='ptr' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lept_mkdir'>
<arg name='subdir' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_mv'>
<arg name='srcfile' const='true' declared_type='char*' type='*'/>
<arg name='newfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_rm'>
<arg name='subdir' const='true' declared_type='char*' type='*'/>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lept_rmdir'>
<arg name='subdir' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapAdd'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<arg name='item' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapCreate'>
<arg name='nalloc' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
</function>
<function name='lheapDestroy'>
<arg name='plh' declared_type='L_HEAP**' type='^^{L_Heap}'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lheapExtendArray'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapGetCount'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapPrint'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapRemove'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lheapSort'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSortStrictOrder'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSwapDown'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lheapSwapUp'>
<arg name='lh' declared_type='L_HEAP*' type='^{L_Heap=ii^^vi}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lineEndianByteSwap'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='linearInterpolatePixelColor'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='y' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<arg name='pval' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='linearInterpolatePixelGray'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='y' declared_type='l_float32' type='f'/>
<arg name='grayval' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listAddToHead'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listAddToTail'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='ptail' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listDestroy'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='listFindElement'>
<arg name='head' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
</function>
<function name='listFindTail'>
<arg name='head' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
</function>
<function name='listGetCount'>
<arg name='head' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listInsertAfter'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='elem' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listInsertBefore'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='elem' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listJoin'>
<arg name='phead1' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='phead2' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='listRemoveElement'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='elem' declared_type='DLLIST*' type='^{DoubleLinkedList=^{DoubleLinkedList}^{DoubleLinkedList}^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listRemoveFromHead'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listRemoveFromTail'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<arg name='ptail' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='listReverse'>
<arg name='phead' declared_type='DLLIST**' type='^^{DoubleLinkedList}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='locateOutsideSeedPixel'>
<arg name='fpx' declared_type='l_int32' type='i'/>
<arg name='fpy' declared_type='l_int32' type='i'/>
<arg name='spx' declared_type='l_int32' type='i'/>
<arg name='spy' declared_type='l_int32' type='i'/>
<arg name='pxs' declared_type='l_int32*' type='^i'/>
<arg name='pys' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='locatePtRadially'>
<arg name='xr' declared_type='l_int32' type='i'/>
<arg name='yr' declared_type='l_int32' type='i'/>
<arg name='dist' declared_type='l_float64' type='d'/>
<arg name='radang' declared_type='l_float64' type='d'/>
<arg name='px' declared_type='l_float64*' type='^d'/>
<arg name='py' declared_type='l_float64*' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueAdd'>
<arg name='lq' declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<arg name='item' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueCreate'>
<arg name='nalloc' declared_type='l_int32' type='i'/>
<retval declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
</function>
<function name='lqueueDestroy'>
<arg name='plq' declared_type='L_QUEUE**' type='^^{L_Queue}'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lqueueExtendArray'>
<arg name='lq' declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueGetCount'>
<arg name='lq' declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueuePrint'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='lq' declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lqueueRemove'>
<arg name='lq' declared_type='L_QUEUE*' type='^{L_Queue=iii^^v^{L_Stack}}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='lstackAdd'>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='item' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackCreate'>
<arg name='nalloc' declared_type='l_int32' type='i'/>
<retval declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
</function>
<function name='lstackDestroy'>
<arg name='plstack' declared_type='L_STACK**' type='^^{L_Stack}'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='lstackExtendArray'>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackGetCount'>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackPrint'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='lstackRemove'>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='make8To1DitherTables'>
<arg name='ptabval' declared_type='l_int32**' type='^^i'/>
<arg name='ptab38' declared_type='l_int32**' type='^^i'/>
<arg name='ptab14' declared_type='l_int32**' type='^^i'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='make8To2DitherTables'>
<arg name='ptabval' declared_type='l_int32**' type='^^i'/>
<arg name='ptab38' declared_type='l_int32**' type='^^i'/>
<arg name='ptab14' declared_type='l_int32**' type='^^i'/>
<arg name='cliptoblack' declared_type='l_int32' type='i'/>
<arg name='cliptowhite' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeDoGKernel'>
<arg name='halfheight' declared_type='l_int32' type='i'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='stdev' declared_type='l_float32' type='f'/>
<arg name='ratio' declared_type='l_float32' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeExpandTab2x'>
<retval declared_type='l_uint16*' type='^S'/>
</function>
<function name='makeExpandTab4x'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeExpandTab8x'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeFlatKernel'>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeGaussianKernel'>
<arg name='halfheight' declared_type='l_int32' type='i'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='stdev' declared_type='l_float32' type='f'/>
<arg name='max' declared_type='l_float32' type='f'/>
<retval declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
</function>
<function name='makeGaussianKernelSep'>
<arg name='halfheight' declared_type='l_int32' type='i'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='stdev' declared_type='l_float32' type='f'/>
<arg name='max' declared_type='l_float32' type='f'/>
<arg name='pkelx' declared_type='L_KERNEL**' type='^^{L_Kernel}'/>
<arg name='pkely' declared_type='L_KERNEL**' type='^^{L_Kernel}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantColormapArb'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='pcmap' declared_type='PIXCMAP**' type='^^{PixColormap}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantIndexTable'>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeGrayQuantTableArb'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='ptab' declared_type='l_int32**' type='^^i'/>
<arg name='pcmap' declared_type='PIXCMAP**' type='^^{PixColormap}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeGrayQuantTargetTable'>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeLogBase2Tab'>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='makeMSBitLocTab'>
<arg name='bitval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeOrientDecision'>
<arg name='upconf' declared_type='l_float32' type='f'/>
<arg name='leftconf' declared_type='l_float32' type='f'/>
<arg name='minupconf' declared_type='l_float32' type='f'/>
<arg name='minratio' declared_type='l_float32' type='f'/>
<arg name='porient' declared_type='l_int32*' type='^i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makePixelCentroidTab8'>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makePixelSumTab8'>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='makeRGBToIndexTables'>
<arg name='prtab' declared_type='l_uint32**' type='^^I'/>
<arg name='pgtab' declared_type='l_uint32**' type='^^I'/>
<arg name='pbtab' declared_type='l_uint32**' type='^^I'/>
<arg name='cqlevels' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='makeReverseByteTab1'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeReverseByteTab2'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeReverseByteTab4'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeSubsampleTab2x'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeSumTabSG2'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeSumTabSG3'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeSumTabSG4'>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='makeValTabSG2'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG3'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG4'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG6'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='makeValTabSG8'>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='morphSequenceVerify'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='multConstAccumulateLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='multConstantGrayLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='nbytesInFile'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='size_t' type='L'/>
</function>
<function name='nextOnPixelInRaster'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xstart' declared_type='l_int32' type='i'/>
<arg name='ystart' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='nextOnPixelInRasterLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='xstart' declared_type='l_int32' type='i'/>
<arg name='ystart' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dAddNumber'>
<arg name='na2d' declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dCreate'>
<arg name='nrows' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<arg name='initsize' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
</function>
<function name='numa2dDestroy'>
<arg name='pna2d' declared_type='NUMA2D**' type='^^{Numa2d}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numa2dGetCount'>
<arg name='na2d' declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetFValue'>
<arg name='na2d' declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetIValue'>
<arg name='na2d' declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numa2dGetNuma'>
<arg name='na2d' declared_type='NUMA2D*' type='^{Numa2d=iii^^^{Numa}}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaAddBorder'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaAddNumber'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaAddSpecifiedBorder'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaArithOp'>
<arg name='nad' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='na1' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='na2' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaChangeRefcount'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaClipToInterval'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='last' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaClone'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaClose'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaContrastTRC'>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaConvertToInt'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCopy'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCopyXParameters'>
<arg name='nad' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaCountReversals'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='minreversal' declared_type='l_float32' type='f'/>
<arg name='pnr' declared_type='l_int32*' type='^i'/>
<arg name='pnrpl' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCreateFromFArray'>
<arg name='farray' declared_type='l_float32*' type='^f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCreateFromIArray'>
<arg name='iarray' declared_type='l_int32*' type='^i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCrossingsByPeaks'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='delta' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaCrossingsByThreshold'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaDestroy'>
<arg name='pna' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaDifferentiateInterval'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='x0' declared_type='l_float32' type='f'/>
<arg name='x1' declared_type='l_float32' type='f'/>
<arg name='npts' declared_type='l_int32' type='i'/>
<arg name='pnadx' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnady' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaDilate'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaDiscretizeRankAndIntensity'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='pnarbin' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnam' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnar' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnabb' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEmpty'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEqualizeTRC'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaErode'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaEvalBestHaarParameters'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='relweight' declared_type='l_float32' type='f'/>
<arg name='nwidth' declared_type='l_int32' type='i'/>
<arg name='nshift' declared_type='l_int32' type='i'/>
<arg name='minwidth' declared_type='l_float32' type='f'/>
<arg name='maxwidth' declared_type='l_float32' type='f'/>
<arg name='pbestwidth' declared_type='l_float32*' type='^f'/>
<arg name='pbestshift' declared_type='l_float32*' type='^f'/>
<arg name='pbestscore' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaEvalHaarSum'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='width' declared_type='l_float32' type='f'/>
<arg name='shift' declared_type='l_float32' type='f'/>
<arg name='relweight' declared_type='l_float32' type='f'/>
<arg name='pscore' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaExtendArray'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaFindExtrema'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='delta' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaFindPeaks'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nmax' declared_type='l_int32' type='i'/>
<arg name='fract1' declared_type='l_float32' type='f'/>
<arg name='fract2' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaFitMax'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pmaxval' declared_type='l_float32*' type='^f'/>
<arg name='naloc' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pmaxloc' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGammaTRC'>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetBinSortIndex'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetCount'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetCountRelativeToZero'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetEdgeValues'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='edge' declared_type='l_int32' type='i'/>
<arg name='pstart' declared_type='l_int32*' type='^i'/>
<arg name='pend' declared_type='l_int32*' type='^i'/>
<arg name='psign' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetFArray'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_float32*' type='^f'/>
</function>
<function name='numaGetFValue'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetHistogramStats'>
<arg name='nahisto' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='deltax' declared_type='l_float32' type='f'/>
<arg name='pxmean' declared_type='l_float32*' type='^f'/>
<arg name='pxmedian' declared_type='l_float32*' type='^f'/>
<arg name='pxmode' declared_type='l_float32*' type='^f'/>
<arg name='pxvariance' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetHistogramStatsOnInterval'>
<arg name='nahisto' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='deltax' declared_type='l_float32' type='f'/>
<arg name='ifirst' declared_type='l_int32' type='i'/>
<arg name='ilast' declared_type='l_int32' type='i'/>
<arg name='pxmean' declared_type='l_float32*' type='^f'/>
<arg name='pxmedian' declared_type='l_float32*' type='^f'/>
<arg name='pxmode' declared_type='l_float32*' type='^f'/>
<arg name='pxvariance' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetIArray'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='numaGetIValue'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pival' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMax'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pmaxval' declared_type='l_float32*' type='^f'/>
<arg name='pimaxloc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMedian'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMin'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pminval' declared_type='l_float32*' type='^f'/>
<arg name='piminloc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetMode'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetNonzeroRange'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='eps' declared_type='l_float32' type='f'/>
<arg name='pfirst' declared_type='l_int32*' type='^i'/>
<arg name='plast' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetPartialSums'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetRankBinValues'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='pnarbin' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnam' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetRankValue'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetRefcount'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSortIndex'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaGetSpanValues'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='span' declared_type='l_int32' type='i'/>
<arg name='pstart' declared_type='l_int32*' type='^i'/>
<arg name='pend' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetStatsUsingHistogram'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='maxbins' declared_type='l_int32' type='i'/>
<arg name='pmin' declared_type='l_float32*' type='^f'/>
<arg name='pmax' declared_type='l_float32*' type='^f'/>
<arg name='pmean' declared_type='l_float32*' type='^f'/>
<arg name='pvariance' declared_type='l_float32*' type='^f'/>
<arg name='pmedian' declared_type='l_float32*' type='^f'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='prval' declared_type='l_float32*' type='^f'/>
<arg name='phisto' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSum'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='psum' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetSumOnInterval'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='last' declared_type='l_int32' type='i'/>
<arg name='psum' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaGetXParameters'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pstartx' declared_type='l_float32*' type='^f'/>
<arg name='pdelx' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHasOnlyIntegers'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='maxsamples' declared_type='l_int32' type='i'/>
<arg name='pallints' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHashAdd'>
<arg name='nahash' declared_type='NUMAHASH*' type='^{NumaHash=ii^^{Numa}}'/>
<arg name='key' declared_type='l_uint32' type='I'/>
<arg name='value' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHashCreate'>
<arg name='nbuckets' declared_type='l_int32' type='i'/>
<arg name='initsize' declared_type='l_int32' type='i'/>
<retval declared_type='NUMAHASH*' type='^{NumaHash=ii^^{Numa}}'/>
</function>
<function name='numaHashDestroy'>
<arg name='pnahash' declared_type='NUMAHASH**' type='^^{NumaHash}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaHashGetNuma'>
<arg name='nahash' declared_type='NUMAHASH*' type='^{NumaHash=ii^^{Numa}}'/>
<arg name='key' declared_type='l_uint32' type='I'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaHistogramGetRankFromVal'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='rval' declared_type='l_float32' type='f'/>
<arg name='prank' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaHistogramGetValFromRank'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='prval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInsertNumber'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaIntegrateInterval'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='x0' declared_type='l_float32' type='f'/>
<arg name='x1' declared_type='l_float32' type='f'/>
<arg name='npts' declared_type='l_int32' type='i'/>
<arg name='psum' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateArbxInterval'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='x0' declared_type='l_float32' type='f'/>
<arg name='x1' declared_type='l_float32' type='f'/>
<arg name='npts' declared_type='l_int32' type='i'/>
<arg name='pnadx' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnady' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateArbxVal'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='xval' declared_type='l_float32' type='f'/>
<arg name='pyval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateEqxInterval'>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='deltax' declared_type='l_float32' type='f'/>
<arg name='nasy' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='x0' declared_type='l_float32' type='f'/>
<arg name='x1' declared_type='l_float32' type='f'/>
<arg name='npts' declared_type='l_int32' type='i'/>
<arg name='pnax' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnay' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInterpolateEqxVal'>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='deltax' declared_type='l_float32' type='f'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='xval' declared_type='l_float32' type='f'/>
<arg name='pyval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaInvert'>
<arg name='nad' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaIsSorted'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='psorted' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaJoin'>
<arg name='nad' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='istart' declared_type='l_int32' type='i'/>
<arg name='iend' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaLogicalOp'>
<arg name='nad' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='na1' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='na2' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaLowPassIntervals'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='maxn' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeConstant'>
<arg name='val' declared_type='l_float32' type='f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeDelta'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogram'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='maxbins' declared_type='l_int32' type='i'/>
<arg name='pbinsize' declared_type='l_int32*' type='^i'/>
<arg name='pbinstart' declared_type='l_int32*' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogramAuto'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='maxbins' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeHistogramClipped'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='binsize' declared_type='l_float32' type='f'/>
<arg name='maxsize' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeRankFromHistogram'>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='deltax' declared_type='l_float32' type='f'/>
<arg name='nasy' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='npts' declared_type='l_int32' type='i'/>
<arg name='pnax' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnay' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaMakeSequence'>
<arg name='startval' declared_type='l_float32' type='f'/>
<arg name='increment' declared_type='l_float32' type='f'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaMakeThresholdIndicator'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaNormalizeHistogram'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='area' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaOpen'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaPseudorandomSequence'>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='seed' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaQuantizeCrossingsByWidth'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='binfract' declared_type='l_float32' type='f'/>
<arg name='pnaehist' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnaohist' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaQuantizeCrossingsByWindow'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='ratio' declared_type='l_float32' type='f'/>
<arg name='pwidth' declared_type='l_float32*' type='^f'/>
<arg name='pfirstloc' declared_type='l_float32*' type='^f'/>
<arg name='pnac' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRandomPermutation'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='seed' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRebinHistogram'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='newsize' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRemoveBorder'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaRemoveNumber'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaReplaceNumber'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSelectCrossingThreshold'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='estthresh' declared_type='l_float32' type='f'/>
<arg name='pbestthresh' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetCount'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='newcount' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetValue'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSetXParameters'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='startx' declared_type='l_float32' type='f'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaShiftValue'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='diff' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSort'>
<arg name='naout' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nain' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaSortByIndex'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='naindex' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaSortPair'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnasx' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnasy' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSplitDistribution'>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='scorefract' declared_type='l_float32' type='f'/>
<arg name='psplitindex' declared_type='l_int32*' type='^i'/>
<arg name='pave1' declared_type='l_float32*' type='^f'/>
<arg name='pave2' declared_type='l_float32*' type='^f'/>
<arg name='pnum1' declared_type='l_float32*' type='^f'/>
<arg name='pnum2' declared_type='l_float32*' type='^f'/>
<arg name='pnascore' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaSubsample'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='subfactor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaThresholdEdges'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='thresh1' declared_type='l_float32' type='f'/>
<arg name='thresh2' declared_type='l_float32' type='f'/>
<arg name='maxn' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaTransform'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='shift' declared_type='l_float32' type='f'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaUniformSampling'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nsamp' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedMean'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedMeanSquare'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaWindowedStats'>
<arg name='nas' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='pnam' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnams' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnav' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnarv' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWindowedVariance'>
<arg name='nam' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nams' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pnav' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnarv' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaAddNuma'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaAddNumber'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaCompareImagesByBoxes'>
<arg name='naa1' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='naa2' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='nperline' declared_type='l_int32' type='i'/>
<arg name='nreq' declared_type='l_int32' type='i'/>
<arg name='maxshiftx' declared_type='l_int32' type='i'/>
<arg name='maxshifty' declared_type='l_int32' type='i'/>
<arg name='delx' declared_type='l_int32' type='i'/>
<arg name='dely' declared_type='l_int32' type='i'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaDestroy'>
<arg name='pnaa' declared_type='NUMAA**' type='^^{Numaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='numaaExtendArray'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaFlattenToNuma'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaaGetCount'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetNuma'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='numaaGetNumaCount'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetNumberCount'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaGetPtrArray'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='NUMA**' type='^^{Numa}'/>
</function>
<function name='numaaGetValue'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='i' declared_type='l_int32' type='i'/>
<arg name='j' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
</function>
<function name='numaaReplaceNuma'>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='numaaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='parseForProtos'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='prestring' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='parseStringForNumbers'>
<arg name='str' const='true' declared_type='char*' type='*'/>
<arg name='seps' const='true' declared_type='char*' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pathJoin'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixAbsDifference'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAccumulate'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddBlackBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='npix' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='npix' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddBorderGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddConstantGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddGray'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddGrayColormap8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddMinimalGrayColormap8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddMirroredBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddMixedBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddRepeatedBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddSingleTextblock'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='location' declared_type='l_int32' type='i'/>
<arg name='poverflow' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAddText'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='textstring' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAddWithIndicator'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAffine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaGammaXform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffinePtaWithAlpha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSampled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSampledPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAffineSequential'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='bw' declared_type='l_int32' type='i'/>
<arg name='bh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAnd'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyHorizontalDisparity'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<arg name='extraw' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyInvBackgroundGrayMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyInvBackgroundRGBMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixmr' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixmg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixmb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyLocalThreshold'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixth' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='redfactor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyVariableGrayMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='target' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixApplyVerticalDisparity'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fpix' declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixAssignToNearestColor'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='countarray' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixAverageIntensityProfile'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='last' declared_type='l_int32' type='i'/>
<arg name='factor1' declared_type='l_int32' type='i'/>
<arg name='factor2' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixAverageOnLine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixBackgroundNorm'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormFlex'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormGrayArray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormGrayArrayMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBackgroundNormRGBArrays'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='ppixr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormRGBArraysMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='ppixr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBackgroundNormSimple'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinear'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaGammaXform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearPtaWithAlpha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearSampled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBilinearSampledPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlend'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendBoxaRandom'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='sindex' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBlendColor'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='transparent' declared_type='l_int32' type='i'/>
<arg name='transpix' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendColorByChannel'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='rfract' declared_type='l_float32' type='f'/>
<arg name='gfract' declared_type='l_float32' type='f'/>
<arg name='bfract' declared_type='l_float32' type='f'/>
<arg name='transparent' declared_type='l_int32' type='i'/>
<arg name='transpix' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendGray'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='transparent' declared_type='l_int32' type='i'/>
<arg name='transpix' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendGrayAdapt'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='shift' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendHardLight'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendInRect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixBlendMask'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlendWithGrayMask'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconv'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvAccum'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixacc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGrayTile'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixacc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvGrayUnnormalized'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockconvTiled'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlockrank'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixacc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixBlocksum'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixacc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCensusTransform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfsize' declared_type='l_int32' type='i'/>
<arg name='pixacc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCentroid'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='centtab' declared_type='l_int32*' type='^i'/>
<arg name='sumtab' declared_type='l_int32*' type='^i'/>
<arg name='pxave' declared_type='l_float32*' type='^f'/>
<arg name='pyave' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixChangeRefcount'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixChooseOutputFormat'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCleanupByteProcessing'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lineptrs' declared_type='l_uint8**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearAll'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearInRect'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClearPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipBoxToEdges'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxs' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='lowthresh' declared_type='l_int32' type='i'/>
<arg name='highthresh' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pboxd' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipBoxToForeground'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxs' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pboxd' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClipMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='outval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClipRectangle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pboxc' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClipToForeground'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pbox' declared_type='BOX**' type='^^{Box}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixClone'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixClose'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseCompBrickExtendDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGeneralized'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseGray3'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafe'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafeBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCloseSafeCompBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorContent'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rwhite' declared_type='l_int32' type='i'/>
<arg name='gwhite' declared_type='l_int32' type='i'/>
<arg name='bwhite' declared_type='l_int32' type='i'/>
<arg name='mingray' declared_type='l_int32' type='i'/>
<arg name='ppixr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorFraction'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='darkthresh' declared_type='l_int32' type='i'/>
<arg name='lightthresh' declared_type='l_int32' type='i'/>
<arg name='diffthresh' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='ppixfract' declared_type='l_float32*' type='^f'/>
<arg name='pcolorfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorGrayCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorMagnitude'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rwhite' declared_type='l_int32' type='i'/>
<arg name='gwhite' declared_type='l_int32' type='i'/>
<arg name='bwhite' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorMorphSequence'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<arg name='dispy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegment'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxdist' declared_type='l_int32' type='i'/>
<arg name='maxcolors' declared_type='l_int32' type='i'/>
<arg name='selsize' declared_type='l_int32' type='i'/>
<arg name='finalcolors' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegmentClean'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='selsize' declared_type='l_int32' type='i'/>
<arg name='countarray' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorSegmentCluster'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxdist' declared_type='l_int32' type='i'/>
<arg name='maxcolors' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorSegmentRemoveColors'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='finalcolors' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColorizeGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='color' declared_type='l_uint32' type='I'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixColorsForQuantization'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<arg name='piscolor' declared_type='l_int32*' type='^i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixColumnStats'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pnamean' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamedian' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamode' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamodecount' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnavar' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnarootvar' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCombineMasked'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCombineMaskedGeneral'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareBinary'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<arg name='ppixdiff' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareGray'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='plottype' declared_type='l_int32' type='i'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<arg name='pdiff' declared_type='l_float32*' type='^f'/>
<arg name='prmsdiff' declared_type='l_float32*' type='^f'/>
<arg name='ppixdiff' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareGrayOrRGB'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='plottype' declared_type='l_int32' type='i'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<arg name='pdiff' declared_type='l_float32*' type='^f'/>
<arg name='prmsdiff' declared_type='l_float32*' type='^f'/>
<arg name='ppixdiff' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareRGB'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='plottype' declared_type='l_int32' type='i'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<arg name='pdiff' declared_type='l_float32*' type='^f'/>
<arg name='prmsdiff' declared_type='l_float32*' type='^f'/>
<arg name='ppixdiff' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCompareRankDifference'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCompareTiled'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='ppixdiff' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConformsToRectangle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='dist' declared_type='l_int32' type='i'/>
<arg name='pconforms' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConnComp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixConnCompBB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixConnCompPixa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixContrastNorm'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixContrastTRC'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixContrastTRCMasked'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert16To8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='whichbyte' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To16'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_uint16' type='S'/>
<arg name='val1' declared_type='l_uint16' type='S'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To2'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_int32' type='i'/>
<arg name='val1' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To2Cmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To32'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_uint32' type='I'/>
<arg name='val1' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To4'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_int32' type='i'/>
<arg name='val1' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To4Cmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert1To8'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_uint8' type='C'/>
<arg name='val1' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert24To32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert2To8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val0' declared_type='l_uint8' type='C'/>
<arg name='val1' declared_type='l_uint8' type='C'/>
<arg name='val2' declared_type='l_uint8' type='C'/>
<arg name='val3' declared_type='l_uint8' type='C'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert32To24'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert4To8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert8To16'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='leftshift' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvert8To32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertColorToSubpixelRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='order' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertForPSWrap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToColormap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToColormap8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToFalseColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertGrayToSubpixelRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='order' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertHSVToRGB'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertLossless'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='d' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToColormap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rwt' declared_type='l_float32' type='f'/>
<arg name='gwt' declared_type='l_float32' type='f'/>
<arg name='bwt' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGrayFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToGrayMinMax'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToHSV'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToHue'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToLuminance'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToSaturation'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToValue'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertRGBToYUV'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo1'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='threshold' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo16'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo1BySampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='threshold' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo32BySampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8BySampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertTo8Or32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<arg name='warnflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertToFPix'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ncomps' declared_type='l_int32' type='i'/>
<retval declared_type='FPIX*' type='^{FPix=iiiiii^f}'/>
</function>
<function name='pixConvertToPdf'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfData'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='plpd' declared_type='L_PDF_DATA**' type='^^{L_Pdf_Data}'/>
<arg name='position' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfDataSegmented'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToPdfSegmented'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixConvertToSubpixelRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='order' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvertYUVToRGB'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolve'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='normflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveRGBSep'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='kelx' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='kely' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixConvolveSep'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='kelx' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='kely' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='normflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopy'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopyBorder'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCopyColormap'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyDimensions'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyInputFormat'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyResolution'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCopyText'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCorrelationBinary'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCorrelationScore'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='area1' declared_type='l_int32' type='i'/>
<arg name='area2' declared_type='l_int32' type='i'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<arg name='dely' declared_type='l_float32' type='f'/>
<arg name='maxdiffw' declared_type='l_int32' type='i'/>
<arg name='maxdiffh' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixCorrelationScoreSimple'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='area1' declared_type='l_int32' type='i'/>
<arg name='area2' declared_type='l_int32' type='i'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<arg name='dely' declared_type='l_float32' type='f'/>
<arg name='maxdiffw' declared_type='l_int32' type='i'/>
<arg name='maxdiffh' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='pixCorrelationScoreThresholded'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='area1' declared_type='l_int32' type='i'/>
<arg name='area2' declared_type='l_int32' type='i'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<arg name='dely' declared_type='l_float32' type='f'/>
<arg name='maxdiffw' declared_type='l_int32' type='i'/>
<arg name='maxdiffh' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='downcount' declared_type='l_int32*' type='^i'/>
<arg name='score_threshold' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountConnComp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountPixels'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCountPixelsByColumn'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCountPixelsByRow'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixCountPixelsInRow'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixCreate'>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateFromPixcomp'>
<arg name='pixc' declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateHeader'>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateNoInit'>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateRGBImage'>
<arg name='pixr' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateTemplate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixCreateTemplateNoInit'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeserializeFromMemory'>
<arg name='data' const='true' declared_type='l_uint32*' type='^I'/>
<arg name='nbytes' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskew'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewBarcode'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='margin' declared_type='l_int32' type='i'/>
<arg name='threshold' declared_type='l_int32' type='i'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDeskewLocal'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nslices' declared_type='l_int32' type='i'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDestroy'>
<arg name='ppix' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixDestroyColormap'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDilate'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateCompBrickExtendDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDilateGray3'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplay'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayColorArray'>
<arg name='carray' declared_type='l_uint32*' type='^I'/>
<arg name='ncolors' declared_type='l_int32' type='i'/>
<arg name='side' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<arg name='textflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayDiffBinary'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayHitMissSel'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='scalefactor' declared_type='l_int32' type='i'/>
<arg name='hitcolor' declared_type='l_uint32' type='I'/>
<arg name='misscolor' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayMatchedPattern'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixp' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixe' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x0' declared_type='l_int32' type='i'/>
<arg name='y0' declared_type='l_int32' type='i'/>
<arg name='color' declared_type='l_uint32' type='I'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayMultiple'>
<arg name='filepattern' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayPta'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayPtaa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDisplayWithTitle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='dispflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayWrite'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDisplayWriteFormat'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixDistanceFunction'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='boundcond' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherTo2bpp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherTo2bppSpec'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinaryLUT'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDitherToBinarySpec'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lowerclip' declared_type='l_int32' type='i'/>
<arg name='upperclip' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDrawBoxa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixDrawBoxaRandom'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEmbedForRotation'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEndianByteSwap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEndianByteSwapNew'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEndianTwoByteSwap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEndianTwoByteSwapNew'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixEqual'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEqualWithCmap'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixEqualizeTRC'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErode'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeCompBrickExtendDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixErodeGray3'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandBinaryPower2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandBinaryReplicate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExpandReplicate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtendByReplication'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='addw' declared_type='l_int32' type='i'/>
<arg name='addh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractBarcodeCrossings'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodeWidths1'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='binfract' declared_type='l_float32' type='f'/>
<arg name='pnaehist' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnaohist' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodeWidths2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='pwidth' declared_type='l_float32*' type='^f'/>
<arg name='pnac' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixExtractBarcodes'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixExtractBorderConnComps'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractBoundary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixExtractData'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='pixExtractOnLine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixFHMTGen_1'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFMorphopGen_1'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFMorphopGen_2'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFadeWithGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFastTophat'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xsize' declared_type='l_int32' type='i'/>
<arg name='ysize' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsMedianCutQuantMixed'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ncolor' declared_type='l_int32' type='i'/>
<arg name='ngray' declared_type='l_int32' type='i'/>
<arg name='maxncolors' declared_type='l_int32' type='i'/>
<arg name='darkthresh' declared_type='l_int32' type='i'/>
<arg name='lightthresh' declared_type='l_int32' type='i'/>
<arg name='diffthresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuant1'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuant2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='ncolors' declared_type='l_int32' type='i'/>
<arg name='pnerrors' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFewColorsOctcubeQuantMixed'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='darkthresh' declared_type='l_int32' type='i'/>
<arg name='lightthresh' declared_type='l_int32' type='i'/>
<arg name='diffthresh' declared_type='l_int32' type='i'/>
<arg name='minfract' declared_type='l_float32' type='f'/>
<arg name='maxspan' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillClosedBorders'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillHolesToBoundingRect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='minsize' declared_type='l_int32' type='i'/>
<arg name='maxhfract' declared_type='l_float32' type='f'/>
<arg name='minfgfract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFillMapHoles'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='filltype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFinalAccumulate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFinalAccumulateThreshold'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<arg name='threshold' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindAreaFraction'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindAreaPerimRatio'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindBaselines'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppta' declared_type='PTA**' type='^^{Pta}'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixFindCornerPixels'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixFindDifferentialSquareSum'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='psum' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindEqualValues'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindHistoPeaksHSV'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='npeaks' declared_type='l_int32' type='i'/>
<arg name='erasefactor' declared_type='l_float32' type='f'/>
<arg name='ppta' declared_type='PTA**' type='^^{Pta}'/>
<arg name='pnatot' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindHorizontalRuns'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='xstart' declared_type='l_int32*' type='^i'/>
<arg name='xend' declared_type='l_int32*' type='^i'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindLargestRectangle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='polarity' declared_type='l_int32' type='i'/>
<arg name='pbox' declared_type='BOX**' type='^^{Box}'/>
<arg name='debugfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindNormalizedSquareSum'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='phratio' declared_type='l_float32*' type='^f'/>
<arg name='pvratio' declared_type='l_float32*' type='^f'/>
<arg name='pfract' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindOverlapFraction'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='pratio' declared_type='l_float32*' type='^f'/>
<arg name='pnoverlap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindPerimSizeRatio'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<arg name='pratio' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindRectangleComps'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dist' declared_type='l_int32' type='i'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixFindSkew'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewAndDeskew'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFindSkewOrthogonalRange'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<arg name='confprior' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweep'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearch'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearchScore'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='pendscore' declared_type='l_float32*' type='^f'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweepcenter' declared_type='l_float32' type='f'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindSkewSweepAndSearchScorePivot'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pangle' declared_type='l_float32*' type='^f'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='pendscore' declared_type='l_float32*' type='^f'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweepcenter' declared_type='l_float32' type='f'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<arg name='pivot' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFindVerticalRuns'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='ystart' declared_type='l_int32*' type='^i'/>
<arg name='yend' declared_type='l_int32*' type='^i'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFixedOctcubeQuant256'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFixedOctcubeQuantGenRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipFHMTGen'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipLR'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFlipPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixFlipTB'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixFreeData'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGammaTRC'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGammaTRCMasked'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGammaTRCWithAlpha'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenHalftoneMask'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixtext' declared_type='PIX**' type='^^{Pix}'/>
<arg name='phtfound' declared_type='l_int32*' type='^i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenTextblockMask'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixvws' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenTextlineMask'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixvws' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ptlfound' declared_type='l_int32*' type='^i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateFlateData'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateFromPta'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateG4Data'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateJpegData'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ascii85flag' declared_type='l_int32' type='i'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<retval declared_type='L_COMPRESSED_DATA*' type='^{L_Compressed_Data=i*I*I**iiiiiiIi}'/>
</function>
<function name='pixGenerateMaskByBand'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lower' declared_type='l_int32' type='i'/>
<arg name='upper' declared_type='l_int32' type='i'/>
<arg name='inband' declared_type='l_int32' type='i'/>
<arg name='usecmap' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByBand32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='refval' declared_type='l_uint32' type='I'/>
<arg name='delm' declared_type='l_int32' type='i'/>
<arg name='delp' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByDiscr32'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='refval1' declared_type='l_uint32' type='I'/>
<arg name='refval2' declared_type='l_uint32' type='I'/>
<arg name='distflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateMaskByValue'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_int32' type='i'/>
<arg name='usecmap' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGenerateSelBoundary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hitdist' declared_type='l_int32' type='i'/>
<arg name='missdist' declared_type='l_int32' type='i'/>
<arg name='hitskip' declared_type='l_int32' type='i'/>
<arg name='missskip' declared_type='l_int32' type='i'/>
<arg name='topflag' declared_type='l_int32' type='i'/>
<arg name='botflag' declared_type='l_int32' type='i'/>
<arg name='leftflag' declared_type='l_int32' type='i'/>
<arg name='rightflag' declared_type='l_int32' type='i'/>
<arg name='ppixe' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGenerateSelRandom'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hitfract' declared_type='l_float32' type='f'/>
<arg name='missfract' declared_type='l_float32' type='f'/>
<arg name='distance' declared_type='l_int32' type='i'/>
<arg name='toppix' declared_type='l_int32' type='i'/>
<arg name='botpix' declared_type='l_int32' type='i'/>
<arg name='leftpix' declared_type='l_int32' type='i'/>
<arg name='rightpix' declared_type='l_int32' type='i'/>
<arg name='ppixe' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGenerateSelWithRuns'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nhlines' declared_type='l_int32' type='i'/>
<arg name='nvlines' declared_type='l_int32' type='i'/>
<arg name='distance' declared_type='l_int32' type='i'/>
<arg name='minlength' declared_type='l_int32' type='i'/>
<arg name='toppix' declared_type='l_int32' type='i'/>
<arg name='botpix' declared_type='l_int32' type='i'/>
<arg name='leftpix' declared_type='l_int32' type='i'/>
<arg name='rightpix' declared_type='l_int32' type='i'/>
<arg name='ppixe' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='pixGetAllCCBorders'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='CCBORDA*' type='^{CCBorda=^{Pix}iiii^^{CCBord}}'/>
</function>
<function name='pixGetAverageMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetAverageMaskedRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_float32*' type='^f'/>
<arg name='pgval' declared_type='l_float32*' type='^f'/>
<arg name='pbval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetAverageTiled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetAverageTiledRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='ppixr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundGrayMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundGrayMapMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='ppixm' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundRGBMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='ppixmr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBackgroundRGBMapMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='ppixmr' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmg' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmb' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBinnedColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='nalut' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pcarray' declared_type='l_uint32**' type='^^I'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetBinnedComponentRange'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='color' declared_type='l_int32' type='i'/>
<arg name='pminval' declared_type='l_int32*' type='^i'/>
<arg name='pmaxval' declared_type='l_int32*' type='^i'/>
<arg name='pcarray' declared_type='l_uint32**' type='^^I'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetCCBorders'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
</function>
<function name='pixGetCmapHistogram'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetCmapHistogramMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetColorHistogram'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pnar' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnag' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnab' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetColorHistogramMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pnar' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnag' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnab' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetColormap'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixGetColumnStats'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='rowvect' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetComponentRange'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='color' declared_type='l_int32' type='i'/>
<arg name='pminval' declared_type='l_int32*' type='^i'/>
<arg name='pmaxval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetData'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_uint32*' type='^I'/>
</function>
<function name='pixGetDepth'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetDifferenceHistogram'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetDifferenceStats'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<arg name='pfractdiff' declared_type='l_float32*' type='^f'/>
<arg name='pavediff' declared_type='l_float32*' type='^f'/>
<arg name='printstats' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetDimensions'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pd' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetEdgeProfile'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='side' declared_type='l_int32' type='i'/>
<arg name='debugfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetExtremeValue'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<arg name='pgrayval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetGrayHistogram'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetGrayHistogramMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetHeight'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetHoleBorder'>
<arg name='ccb' declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='xs' declared_type='l_int32' type='i'/>
<arg name='ys' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetInputFormat'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetInvBackgroundMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetLastOffPixelInRun'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetLastOnPixelInRun'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetLinePtrs'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='psize' declared_type='l_int32*' type='^i'/>
<retval declared_type='void**' type='^^v'/>
</function>
<function name='pixGetLocalSkewAngles'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nslices' declared_type='l_int32' type='i'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<arg name='pa' declared_type='l_float32*' type='^f'/>
<arg name='pb' declared_type='l_float32*' type='^f'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetLocalSkewTransform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nslices' declared_type='l_int32' type='i'/>
<arg name='redsweep' declared_type='l_int32' type='i'/>
<arg name='redsearch' declared_type='l_int32' type='i'/>
<arg name='sweeprange' declared_type='l_float32' type='f'/>
<arg name='sweepdelta' declared_type='l_float32' type='f'/>
<arg name='minbsdelta' declared_type='l_float32' type='f'/>
<arg name='pptas' declared_type='PTA**' type='^^{Pta}'/>
<arg name='pptad' declared_type='PTA**' type='^^{Pta}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetMaxValueInRect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pmaxval' declared_type='l_uint32*' type='^I'/>
<arg name='pxmax' declared_type='l_int32*' type='^i'/>
<arg name='pymax' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetMeanVerticals'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixGetOuterBorder'>
<arg name='ccb' declared_type='CCBORD*' type='^{CCBord=^{Pix}^{Boxa}^{Pta}i^{Ptaa}^{Ptaa}^{Numaa}^{Pta}^{Pta}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetOuterBorderPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixGetOuterBordersPtaa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='pixGetPSNR'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='ppsnr' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRGBComponent'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetRGBComponentCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGetRGBLine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='bufr' declared_type='l_uint8*' type='*'/>
<arg name='bufg' declared_type='l_uint8*' type='*'/>
<arg name='bufb' declared_type='l_uint8*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRGBPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRandomPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pval' declared_type='l_uint32*' type='^I'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankColorArray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pcarray' declared_type='l_uint32**' type='^^I'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankValueMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<arg name='pna' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRankValueMaskedRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='prval' declared_type='l_float32*' type='^f'/>
<arg name='pgval' declared_type='l_float32*' type='^f'/>
<arg name='pbval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRasterData'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRefcount'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRegionsBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixhm' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixtm' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixtb' declared_type='PIX**' type='^^{Pix}'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetResolution'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pxres' declared_type='l_int32*' type='^i'/>
<arg name='pyres' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRowStats'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='colvect' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetRunCentersOnLine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='minlength' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetRunsOnLine'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixGetText'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixGetTextlineCenters'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='pixGetWidth'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWordBoxesInTextlines'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='minwidth' declared_type='l_int32' type='i'/>
<arg name='minheight' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='pboxad' declared_type='BOXA**' type='^^{Boxa}'/>
<arg name='pnai' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWordsInTextlines'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='minwidth' declared_type='l_int32' type='i'/>
<arg name='minheight' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='maxheight' declared_type='l_int32' type='i'/>
<arg name='pboxad' declared_type='BOXA**' type='^^{Boxa}'/>
<arg name='ppixad' declared_type='PIXA**' type='^^{Pixa}'/>
<arg name='pnai' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetWpl'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetXRes'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGetYRes'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixGlobalNormNoSatRGB'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGlobalNormRGB'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='mapval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayMorphSequence'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<arg name='dispy' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayQuantFromCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixGrayQuantFromHisto'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='minfract' declared_type='l_float32' type='f'/>
<arg name='maxsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHDome'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHMT'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHMTDwa_1'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShear'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='liney' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearCenter'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearCorner'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHShearIP'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='liney' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixHShearLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='liney' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHalfEdgeByBandpass'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sm1h' declared_type='l_int32' type='i'/>
<arg name='sm1v' declared_type='l_int32' type='i'/>
<arg name='sm2h' declared_type='l_int32' type='i'/>
<arg name='sm2v' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHaustest'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix3' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix4' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<arg name='dely' declared_type='l_float32' type='f'/>
<arg name='maxdiffw' declared_type='l_int32' type='i'/>
<arg name='maxdiffh' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixHolesByFilling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixHtmlViewer'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='dirout' const='true' declared_type='char*' type='*'/>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<arg name='thumbwidth' declared_type='l_int32' type='i'/>
<arg name='viewwidth' declared_type='l_int32' type='i'/>
<arg name='copyorig' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixInitAccumulate'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixIntersectionOfMorphOps'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixInvert'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixItalicWords'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxaw' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pixw' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixLinearMapToTargetColor'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='srcval' declared_type='l_uint32' type='I'/>
<arg name='dstval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixLinearTRCTiled'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='pixmin' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixmax' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixLocalExtrema'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxmin' declared_type='l_int32' type='i'/>
<arg name='minmax' declared_type='l_int32' type='i'/>
<arg name='ppixmin' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmax' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixLocateBarcodes'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixm' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixMakeHistoHS'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pnahue' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnasat' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeHistoHV'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pnahue' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnaval' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeHistoSV'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pnasat' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnaval' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeMaskFromLUT'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskHS'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='huecenter' declared_type='l_int32' type='i'/>
<arg name='huehw' declared_type='l_int32' type='i'/>
<arg name='satcenter' declared_type='l_int32' type='i'/>
<arg name='sathw' declared_type='l_int32' type='i'/>
<arg name='regionflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskHV'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='huecenter' declared_type='l_int32' type='i'/>
<arg name='huehw' declared_type='l_int32' type='i'/>
<arg name='valcenter' declared_type='l_int32' type='i'/>
<arg name='valhw' declared_type='l_int32' type='i'/>
<arg name='regionflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMakeRangeMaskSV'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='satcenter' declared_type='l_int32' type='i'/>
<arg name='sathw' declared_type='l_int32' type='i'/>
<arg name='valcenter' declared_type='l_int32' type='i'/>
<arg name='valhw' declared_type='l_int32' type='i'/>
<arg name='regionflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskBoxa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskConnComp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskOverColorPixels'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='threshdiff' declared_type='l_int32' type='i'/>
<arg name='mindist' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaskedThreshOnBackgroundNorm'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='scorefract' declared_type='l_float32' type='f'/>
<arg name='pthresh' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMaxDynamicRange'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMeanInRectangle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pixma' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMeanSquareAccum'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
</function>
<function name='pixMeasureEdgeSmoothness'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='side' declared_type='l_int32' type='i'/>
<arg name='minjump' declared_type='l_int32' type='i'/>
<arg name='minreversal' declared_type='l_int32' type='i'/>
<arg name='pjpl' declared_type='l_float32*' type='^f'/>
<arg name='pjspl' declared_type='l_float32*' type='^f'/>
<arg name='prpl' declared_type='l_float32*' type='^f'/>
<arg name='debugfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMeasureSaturation'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='psat' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMedianCutHisto'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sigbits' declared_type='l_int32' type='i'/>
<arg name='subsample' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='pixMedianCutQuant'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianCutQuantGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='maxcolors' declared_type='l_int32' type='i'/>
<arg name='sigbits' declared_type='l_int32' type='i'/>
<arg name='maxsub' declared_type='l_int32' type='i'/>
<arg name='checkbw' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianCutQuantMixed'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ncolor' declared_type='l_int32' type='i'/>
<arg name='ngray' declared_type='l_int32' type='i'/>
<arg name='darkthresh' declared_type='l_int32' type='i'/>
<arg name='lightthresh' declared_type='l_int32' type='i'/>
<arg name='diffthresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMedianFilter'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wf' declared_type='l_int32' type='i'/>
<arg name='hf' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMinMaxTiles'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='ppixmin' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmax' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMinOrMax'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMirrorDetect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMirrorDetectDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMirroredTiling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixModifyHue'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixModifySaturation'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphCompSequence'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphCompSequenceDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphDwa_1'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphDwa_2'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphGradient'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<arg name='smoothing' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequence'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceByComponent'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceByRegion'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMorphSequenceMasked'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='dispsep' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMultConstAccumulate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='offset' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMultConstantColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rfact' declared_type='l_float32' type='f'/>
<arg name='gfact' declared_type='l_float32' type='f'/>
<arg name='bfact' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixMultConstantGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixMultMatrixColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='kel' declared_type='L_KERNEL*' type='^{L_Kernel=iiii^^f}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixNumColors'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixNumSignificantGrayColors'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='darkthresh' declared_type='l_int32' type='i'/>
<arg name='lightthresh' declared_type='l_int32' type='i'/>
<arg name='minfract' declared_type='l_float32' type='f'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixNumberOccupiedOctcubes'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='minfract' declared_type='l_float32' type='f'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOctcubeHistogram'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixOctcubeQuantFromCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='metric' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctcubeQuantFromCmapLUT'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<arg name='cmaptab' declared_type='l_int32*' type='^i'/>
<arg name='rtab' declared_type='l_uint32*' type='^I'/>
<arg name='gtab' declared_type='l_uint32*' type='^I'/>
<arg name='btab' declared_type='l_uint32*' type='^I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctcubeQuantMixedWithGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='graylevels' declared_type='l_int32' type='i'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeColorQuant'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='colors' declared_type='l_int32' type='i'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeColorQuantGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='colors' declared_type='l_int32' type='i'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<arg name='validthresh' declared_type='l_float32' type='f'/>
<arg name='colorthresh' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeQuantByPopulation'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='ditherflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOctreeQuantNumColors'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxcolors' declared_type='l_int32' type='i'/>
<arg name='subsample' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpen'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrick'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrickDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenCompBrickExtendDwa'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGeneralized'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOpenGray3'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOr'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixOrientDetect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pupconf' declared_type='l_float32*' type='^f'/>
<arg name='pleftconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOrientDetectDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pupconf' declared_type='l_float32*' type='^f'/>
<arg name='pleftconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOtsuAdaptiveThreshold'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='scorefract' declared_type='l_float32' type='f'/>
<arg name='ppixth' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixOtsuThreshOnBackgroundNorm'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixim' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='bgval' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='scorefract' declared_type='l_float32' type='f'/>
<arg name='pthresh' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintBoxa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintBoxaRandom'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixPaintSelfThroughMask'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='tilesize' declared_type='l_int32' type='i'/>
<arg name='searchdir' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPaintThroughMask'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPlotAlongPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='outformat' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixPrintStreamInfo'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='text' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixProcessBarcodes'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<arg name='method' declared_type='l_int32' type='i'/>
<arg name='psaw' declared_type='SARRAY**' type='^^{Sarray}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='pixProjective'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaGammaXform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectivePtaWithAlpha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveSampled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixProjectiveSampledPta'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShear'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='vmaxt' declared_type='l_int32' type='i'/>
<arg name='vmaxb' declared_type='l_int32' type='i'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShearLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='vmaxt' declared_type='l_int32' type='i'/>
<arg name='vmaxb' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadraticVShearSampled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='vmaxt' declared_type='l_int32' type='i'/>
<arg name='vmaxb' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuadtreeMean'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='pix_ma' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pfpixa' declared_type='FPIXA**' type='^^{FPixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixQuadtreeVariance'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='pix_ma' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dpix_msa' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='pfpixa_v' declared_type='FPIXA**' type='^^{FPixa}'/>
<arg name='pfpixa_rv' declared_type='FPIXA**' type='^^{FPixa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixQuantFromCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='metric' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixQuantizeIfFewColors'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxcolors' declared_type='l_int32' type='i'/>
<arg name='mingraycolors' declared_type='l_int32' type='i'/>
<arg name='octlevel' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRandomHarmonicWarp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xmag' declared_type='l_float32' type='f'/>
<arg name='ymag' declared_type='l_float32' type='f'/>
<arg name='xfreq' declared_type='l_float32' type='f'/>
<arg name='yfreq' declared_type='l_float32' type='f'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='seed' declared_type='l_uint32' type='I'/>
<arg name='grayval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankColumnTransform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilter'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wf' declared_type='l_int32' type='i'/>
<arg name='hf' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilterGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wf' declared_type='l_int32' type='i'/>
<arg name='hf' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankFilterRGB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wf' declared_type='l_int32' type='i'/>
<arg name='hf' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRankHaustest'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix3' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix4' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='delx' declared_type='l_float32' type='f'/>
<arg name='dely' declared_type='l_float32' type='f'/>
<arg name='maxdiffw' declared_type='l_int32' type='i'/>
<arg name='maxdiffh' declared_type='l_int32' type='i'/>
<arg name='area1' declared_type='l_int32' type='i'/>
<arg name='area3' declared_type='l_int32' type='i'/>
<arg name='rank' declared_type='l_float32' type='f'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRankRowTransform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRasterop'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dx' declared_type='l_int32' type='i'/>
<arg name='dy' declared_type='l_int32' type='i'/>
<arg name='dw' declared_type='l_int32' type='i'/>
<arg name='dh' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropFullImage'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropHip'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='by' declared_type='l_int32' type='i'/>
<arg name='bh' declared_type='l_int32' type='i'/>
<arg name='hshift' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropIP'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hshift' declared_type='l_int32' type='i'/>
<arg name='vshift' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRasteropVip'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='bx' declared_type='l_int32' type='i'/>
<arg name='bw' declared_type='l_int32' type='i'/>
<arg name='vshift' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadBarcodeWidths'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='method' declared_type='l_int32' type='i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixReadBarcodes'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<arg name='method' declared_type='l_int32' type='i'/>
<arg name='psaw' declared_type='SARRAY**' type='^^{Sarray}'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='pixReadHeader'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixReadHeaderMem'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixReadIndexed'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadJpeg'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='cmflag' declared_type='l_int32' type='i'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='pnwarn' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMem'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemBmp'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemGif'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemJpeg'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='cmflag' declared_type='l_int32' type='i'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='pnwarn' declared_type='l_int32*' type='^i'/>
<arg name='hint' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemPng'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemPnm'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemSpix'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadMemTiff'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadRGBAPng'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='hint' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamBmp'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamGif'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamJpeg'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='cmflag' declared_type='l_int32' type='i'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='pnwarn' declared_type='l_int32*' type='^i'/>
<arg name='hint' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamPng'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamPnm'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamSpix'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamTiff'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadStreamWebP'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadTiff'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReadWithHint'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='hint' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceBinary2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='intab' declared_type='l_uint8*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceRankBinary2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='intab' declared_type='l_uint8*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReduceRankBinaryCascade'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level1' declared_type='l_int32' type='i'/>
<arg name='level2' declared_type='l_int32' type='i'/>
<arg name='level3' declared_type='l_int32' type='i'/>
<arg name='level4' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='npix' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorderConnComps'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveBorderGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveColormap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveMatchedPattern'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixp' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixe' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x0' declared_type='l_int32' type='i'/>
<arg name='y0' declared_type='l_int32' type='i'/>
<arg name='dsize' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRemoveSeededComponents'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='bordersize' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRemoveUnusedColors'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRemoveWithIndicator'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBox'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxa'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxaArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderBoxaBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='removedups' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderContours'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='startval' declared_type='l_int32' type='i'/>
<arg name='incr' declared_type='l_int32' type='i'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRenderHashBox'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='orient' declared_type='l_int32' type='i'/>
<arg name='outline' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderHashBoxArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='orient' declared_type='l_int32' type='i'/>
<arg name='outline' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderHashBoxBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='orient' declared_type='l_int32' type='i'/>
<arg name='outline' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLine'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLineArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderLineBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x1' declared_type='l_int32' type='i'/>
<arg name='y1' declared_type='l_int32' type='i'/>
<arg name='x2' declared_type='l_int32' type='i'/>
<arg name='y2' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolyline'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<arg name='closeflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolylineArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='closeflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPolylineBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='closeflag' declared_type='l_int32' type='i'/>
<arg name='removedups' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPta'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPtaArb'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderPtaBlend'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='rval' declared_type='l_uint8' type='C'/>
<arg name='gval' declared_type='l_uint8' type='C'/>
<arg name='bval' declared_type='l_uint8' type='C'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRenderRandomCmapPtaa'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='polyflag' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='closeflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixResizeImageData'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixResizeToMatch'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixt' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixReversalProfile'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='last' declared_type='l_int32' type='i'/>
<arg name='minreversal' declared_type='l_int32' type='i'/>
<arg name='factor1' declared_type='l_int32' type='i'/>
<arg name='factor2' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixRotate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate180'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate2Shear'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate3Shear'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotate90'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAM'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColorCorner'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='fillval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMColorFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMCorner'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateAMGrayCorner'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateBinaryNice'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateBySampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateGammaXform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateOrth'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quads' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShear'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShearCenter'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRotateShearCenterIP'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRotateShearIP'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xcen' declared_type='l_int32' type='i'/>
<arg name='ycen' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRotateWithAlpha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixRowStats'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pnamean' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamedian' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamode' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnamodecount' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnavar' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnarootvar' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixRunHistogramMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='runtype' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='maxsize' declared_type='l_int32' type='i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixRunlengthTransform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSauvolaBinarize'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='whsize' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='addborder' declared_type='l_int32' type='i'/>
<arg name='ppixm' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixsd' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixth' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSauvolaBinarizeTiled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='whsize' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='ppixth' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSauvolaGetThreshold'>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixms' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<arg name='ppixsd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSaveTiled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='newrow' declared_type='l_int32' type='i'/>
<arg name='space' declared_type='l_int32' type='i'/>
<arg name='dp' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSaveTiledOutline'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='reduction' declared_type='l_int32' type='i'/>
<arg name='newrow' declared_type='l_int32' type='i'/>
<arg name='space' declared_type='l_int32' type='i'/>
<arg name='linewidth' declared_type='l_int32' type='i'/>
<arg name='dp' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSaveTiledWithText'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='outwidth' declared_type='l_int32' type='i'/>
<arg name='newrow' declared_type='l_int32' type='i'/>
<arg name='space' declared_type='l_int32' type='i'/>
<arg name='linewidth' declared_type='l_int32' type='i'/>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='location' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScale'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleAreaMap'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleAreaMap2'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleByIntSubsampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleBySampling'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColor2xLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColor4xLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleColorLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGammaXform'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='sharpfract' declared_type='l_float32' type='f'/>
<arg name='sharpwidth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLIDither'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray2xLIThresh'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLIDither'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGray4xLIThresh'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayMinMax'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xfact' declared_type='l_int32' type='i'/>
<arg name='yfact' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayMinMax2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayRank2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rank' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayRankCascade'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='level1' declared_type='l_int32' type='i'/>
<arg name='level2' declared_type='l_int32' type='i'/>
<arg name='level3' declared_type='l_int32' type='i'/>
<arg name='level4' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleGrayToBinaryFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleMipmap'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToBinaryFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToGray2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rwt' declared_type='l_float32' type='f'/>
<arg name='gwt' declared_type='l_float32' type='f'/>
<arg name='bwt' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleRGBToGrayFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='color' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleResolution'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xscale' declared_type='l_float32' type='f'/>
<arg name='yscale' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScaleSmooth'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray16'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray2'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray3'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray4'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray6'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGray8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGrayFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToGrayMipmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleToSize'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScaleWithAlpha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixScanForEdge'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='lowthresh' declared_type='l_int32' type='i'/>
<arg name='highthresh' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='scanflag' declared_type='l_int32' type='i'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixScanForForeground'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='scanflag' declared_type='l_int32' type='i'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSearchBinaryMaze'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xi' declared_type='l_int32' type='i'/>
<arg name='yi' declared_type='l_int32' type='i'/>
<arg name='xf' declared_type='l_int32' type='i'/>
<arg name='yf' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixSearchGrayMaze'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xi' declared_type='l_int32' type='i'/>
<arg name='yi' declared_type='l_int32' type='i'/>
<arg name='xf' declared_type='l_int32' type='i'/>
<arg name='yf' declared_type='l_int32' type='i'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixSeedfill'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill4'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill4BB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfill8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfill8BB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfillBB'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='lstack' declared_type='L_STACK*' type='^{L_Stack=ii^^v^{L_Stack}}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixSeedfillBinary'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillBinaryRestricted'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='xmax' declared_type='l_int32' type='i'/>
<arg name='ymax' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGrayBasin'>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedfillGrayInv'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGrayInvSimple'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillGraySimple'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSeedfillMorph'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSeedspread'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByAreaFraction'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByAreaPerimRatio'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectBySize'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='relation' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectByWidthHeightRatio'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSelectMinInConnComp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pnav' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixSelectedLocalExtrema'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='mindist' declared_type='l_int32' type='i'/>
<arg name='ppixmin' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixmax' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSelectiveConnCompFill'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSerializeToMemory'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pdata' declared_type='l_uint32**' type='^^I'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetAll'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetAllArbitrary'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetBlackOrWhite'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetBlackOrWhiteBoxa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSetBorderRingVal'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dist' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetBorderVal'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetColormap'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='colormap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetData'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetDepth'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetDimensions'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetHeight'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='height' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInRect'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInRectArbitrary'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetInputFormat'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='informat' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetLowContrast'>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMasked'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMaskedCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMaskedGeneral'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetMirroredBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetOrClearBorder'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPadBits'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPadBitsBand'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='by' declared_type='l_int32' type='i'/>
<arg name='bh' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetPixelColumn'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='colvect' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetRGBComponent'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetRGBPixel'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetResolution'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='xres' declared_type='l_int32' type='i'/>
<arg name='yres' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetSelectCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='sindex' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetSelectMaskedCmap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='sindex' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetText'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='textstring' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetTextblock'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='x0' declared_type='l_int32' type='i'/>
<arg name='y0' declared_type='l_int32' type='i'/>
<arg name='wtext' declared_type='l_int32' type='i'/>
<arg name='firstindent' declared_type='l_int32' type='i'/>
<arg name='poverflow' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetTextline'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='bmf' declared_type='L_BMF*' type='^{L_Bmf=^{Pixa}i*iiiiiii^i^i^i}'/>
<arg name='textstr' const='true' declared_type='char*' type='*'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='x0' declared_type='l_int32' type='i'/>
<arg name='y0' declared_type='l_int32' type='i'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='poverflow' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetUnderTransparency'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSetWidth'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetWpl'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetXRes'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetYRes'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSetupByteProcessing'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_uint8**' type='^*'/>
</function>
<function name='pixSimpleCaptcha'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='border' declared_type='l_int32' type='i'/>
<arg name='nterms' declared_type='l_int32' type='i'/>
<arg name='seed' declared_type='l_uint32' type='I'/>
<arg name='color' declared_type='l_uint32' type='I'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSizesEqual'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSmoothConnectedRegions'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSnapColor'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='srcval' declared_type='l_uint32' type='I'/>
<arg name='dstval' declared_type='l_uint32' type='I'/>
<arg name='diff' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSnapColorCmap'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='srcval' declared_type='l_uint32' type='I'/>
<arg name='dstval' declared_type='l_uint32' type='I'/>
<arg name='diff' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSobelEdgeFilter'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='orientflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSplitComponentIntoBoxa'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='minsum' declared_type='l_int32' type='i'/>
<arg name='skipdist' declared_type='l_int32' type='i'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<arg name='maxbg' declared_type='l_int32' type='i'/>
<arg name='maxcomps' declared_type='l_int32' type='i'/>
<arg name='remainder' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixSplitDistributionFgBg'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scorefract' declared_type='l_float32' type='f'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='pthresh' declared_type='l_int32*' type='^i'/>
<arg name='pfgval' declared_type='l_int32*' type='^i'/>
<arg name='pbgval' declared_type='l_int32*' type='^i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSplitIntoBoxa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='minsum' declared_type='l_int32' type='i'/>
<arg name='skipdist' declared_type='l_int32' type='i'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<arg name='maxbg' declared_type='l_int32' type='i'/>
<arg name='maxcomps' declared_type='l_int32' type='i'/>
<arg name='remainder' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixStereoFromPair'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='rwt' declared_type='l_float32' type='f'/>
<arg name='gwt' declared_type='l_float32' type='f'/>
<arg name='bwt' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontal'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='hmax' declared_type='l_int32' type='i'/>
<arg name='operation' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontalLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='hmax' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixStretchHorizontalSampled'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dir' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='hmax' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSubsampleBoundaryPixels'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='skip' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixSubtract'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSubtractGray'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixSumPixelValues'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='psum' declared_type='l_float64*' type='^d'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixSumPixelsByColumn'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixSumPixelsByRow'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixTRCMap'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTestForSimilarity'>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<arg name='maxfract' declared_type='l_float32' type='f'/>
<arg name='maxave' declared_type='l_float32' type='f'/>
<arg name='psimilar' declared_type='l_int32*' type='^i'/>
<arg name='printstats' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThin'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='maxiters' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThinExamples'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='maxiters' declared_type='l_int32' type='i'/>
<arg name='selfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThinGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='maxiters' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThreshold8'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdForFgBg'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='pfgval' declared_type='l_int32*' type='^i'/>
<arg name='pbgval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdGrayArb'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='edgevals' const='true' declared_type='char*' type='*'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='use_average' declared_type='l_int32' type='i'/>
<arg name='setblack' declared_type='l_int32' type='i'/>
<arg name='setwhite' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdOn8bpp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdPixelSum'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<arg name='pabove' declared_type='l_int32*' type='^i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdSpreadNorm'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='filtertype' declared_type='l_int32' type='i'/>
<arg name='edgethresh' declared_type='l_int32' type='i'/>
<arg name='smoothx' declared_type='l_int32' type='i'/>
<arg name='smoothy' declared_type='l_int32' type='i'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<arg name='targetthresh' declared_type='l_int32' type='i'/>
<arg name='ppixth' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixb' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixd' declared_type='PIX**' type='^^{Pix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixThresholdTo2bpp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdTo4bpp'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdToBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixThresholdToValue'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='threshval' declared_type='l_int32' type='i'/>
<arg name='setval' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTilingCreate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='xoverlap' declared_type='l_int32' type='i'/>
<arg name='yoverlap' declared_type='l_int32' type='i'/>
<retval declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
</function>
<function name='pixTilingDestroy'>
<arg name='ppt' declared_type='PIXTILING**' type='^^{PixTiling}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixTilingGetCount'>
<arg name='pt' declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg name='pnx' declared_type='l_int32*' type='^i'/>
<arg name='pny' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingGetSize'>
<arg name='pt' declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingGetTile'>
<arg name='pt' declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
<arg name='i' declared_type='l_int32' type='i'/>
<arg name='j' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTilingNoStripOnPaint'>
<arg name='pt' declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTilingPaintTile'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='i' declared_type='l_int32' type='i'/>
<arg name='j' declared_type='l_int32' type='i'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pt' declared_type='PIXTILING*' type='^{PixTiling=^{Pix}iiiiiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTophat'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTransferAllData'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ppixs' declared_type='PIX**' type='^^{Pix}'/>
<arg name='copytext' declared_type='l_int32' type='i'/>
<arg name='copyformat' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixTranslate'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='hshift' declared_type='l_int32' type='i'/>
<arg name='vshift' declared_type='l_int32' type='i'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixTwoSidedEdgeFilter'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='orientflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnionOfMorphOps'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnpackBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='invert' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMasking'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray1D'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGray2D'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUnsharpMaskingGrayFast'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='halfwidth' declared_type='l_int32' type='i'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixUpDownDetect'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectGeneral'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='npixels' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUpDownDetectGeneralDwa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pconf' declared_type='l_float32*' type='^f'/>
<arg name='mincount' declared_type='l_int32' type='i'/>
<arg name='npixels' declared_type='l_int32' type='i'/>
<arg name='debug' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixUsesCmapColor'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pcolor' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixVShear'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='linex' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearCenter'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearCorner'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVShearIP'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='linex' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixVShearLI'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='linex' declared_type='l_int32' type='i'/>
<arg name='radang' declared_type='l_float32' type='f'/>
<arg name='incolor' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVarThresholdToBinary'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixg' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixVarianceInRectangle'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='pix_ma' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='dpix_msa' declared_type='DPIX*' type='^{DPix=iiiiii^d}'/>
<arg name='pvar' declared_type='l_float32*' type='^f'/>
<arg name='prvar' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWarpStereoscopic'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='zbend' declared_type='l_int32' type='i'/>
<arg name='zshiftt' declared_type='l_int32' type='i'/>
<arg name='zshiftb' declared_type='l_int32' type='i'/>
<arg name='ybendt' declared_type='l_int32' type='i'/>
<arg name='ybendb' declared_type='l_int32' type='i'/>
<arg name='redleft' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedMean'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='hasborder' declared_type='l_int32' type='i'/>
<arg name='normflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedMeanSquare'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='hasborder' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWindowedStats'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='wc' declared_type='l_int32' type='i'/>
<arg name='hc' declared_type='l_int32' type='i'/>
<arg name='hasborder' declared_type='l_int32' type='i'/>
<arg name='ppixm' declared_type='PIX**' type='^^{Pix}'/>
<arg name='ppixms' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pfpixv' declared_type='FPIX**' type='^^{FPix}'/>
<arg name='pfpixrv' declared_type='FPIX**' type='^^{FPix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWindowedVariance'>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixms' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pfpixv' declared_type='FPIX**' type='^^{FPix}'/>
<arg name='pfpixrv' declared_type='FPIX**' type='^^{FPix}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWordMaskByDilation'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='maxsize' declared_type='l_int32' type='i'/>
<arg name='psize' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteImpliedFormat'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='progressive' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteJpeg'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='progressive' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMem'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemBmp'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemGif'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemJpeg'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='progressive' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPS'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPng'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemPnm'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemSpix'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemTiff'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMemTiffCustom'>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='psize' declared_type='size_t*' type='^I'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='natags' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='savals' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='satypes' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='nasizes' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteMixedToPS'>
<arg name='pixb' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixc' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWritePSEmbed'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWritePng'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteRGBAPng'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteSegmentedPageToPS'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='textscale' declared_type='l_float32' type='f'/>
<arg name='imagescale' declared_type='l_float32' type='f'/>
<arg name='threshold' declared_type='l_int32' type='i'/>
<arg name='pageno' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamAsciiPnm'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamBmp'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamGif'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamJpeg'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='progressive' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPS'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPdf'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPng'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamPnm'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamSpix'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamTiff'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStreamWebP'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteStringPS'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scale' declared_type='l_float32' type='f'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixWriteTempfile'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='tail' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<arg name='pfilename' declared_type='char**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteTiff'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='modestring' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteTiffCustom'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='modestring' const='true' declared_type='char*' type='*'/>
<arg name='natags' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='savals' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='satypes' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='nasizes' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteWebP'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixWriteWebPwithTargetPSNR'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='target_psnr' declared_type='l_float64' type='d'/>
<arg name='pquality' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixXor'>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixs2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixZero'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pempty' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAddBorderGeneral'>
<arg name='pixad' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='left' declared_type='l_int32' type='i'/>
<arg name='right' declared_type='l_int32' type='i'/>
<arg name='top' declared_type='l_int32' type='i'/>
<arg name='bot' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaAddBox'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAddPix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaAnyColormaps'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='phascmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaBinSort'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='sorttype' declared_type='l_int32' type='i'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCentroids'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='pixaChangeRefcount'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaClear'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaClipToPix'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCopy'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCountPixels'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromBoxa'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='boxa' declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
<arg name='pcropwarn' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromPix'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='cellw' declared_type='l_int32' type='i'/>
<arg name='cellh' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaCreateFromPixacomp'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaDestroy'>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaDisplay'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayOnColor'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='bgcolor' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayOnLattice'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='xspace' declared_type='l_int32' type='i'/>
<arg name='yspace' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayRandomCmap'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiled'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='background' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiledAndScaled'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='tilewidth' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<arg name='background' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayTiledInRows'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='maxwidth' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='background' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaDisplayUnsplit'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='borderwidth' declared_type='l_int32' type='i'/>
<arg name='bordercolor' declared_type='l_uint32' type='I'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaEqual'>
<arg name='pixa1' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pixa2' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='maxdist' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtendArray'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtendArrayToSize'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaExtractColumnFromEachPix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='pixd' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaFindAreaFraction'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindAreaPerimRatio'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindDimensions'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pnaw' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnah' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaFindPerimSizeRatio'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindWidthHeightProduct'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaFindWidthHeightRatio'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
</function>
<function name='pixaGenerateFont'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='pbl0' declared_type='l_int32*' type='^i'/>
<arg name='pbl1' declared_type='l_int32*' type='^i'/>
<arg name='pbl2' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaGetAlignedStats'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='nbins' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaGetBox'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixaGetBoxGeometry'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetBoxa'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixaGetBoxaCount'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetCount'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetDepthInfo'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pmaxdepth' declared_type='l_int32*' type='^i'/>
<arg name='psame' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaGetFont'>
<arg name='dir' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='pbl0' declared_type='l_int32*' type='^i'/>
<arg name='pbl1' declared_type='l_int32*' type='^i'/>
<arg name='pbl2' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaGetPix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaGetPixArray'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='PIX**' type='^^{Pix}'/>
</function>
<function name='pixaGetPixDimensions'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pd' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaInitFull'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaInsertPix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaJoin'>
<arg name='pixad' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='istart' declared_type='l_int32' type='i'/>
<arg name='iend' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaMorphSequenceByComponent'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaMorphSequenceByRegion'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixam' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='sequence' const='true' declared_type='char*' type='*'/>
<arg name='minw' declared_type='l_int32' type='i'/>
<arg name='minh' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadFiles'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadFilesSA'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadMultipageTiff'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaRemovePix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaReplacePix'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSaveFont'>
<arg name='indir' const='true' declared_type='char*' type='*'/>
<arg name='outdir' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSelectByAreaFraction'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectByAreaPerimRatio'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectBySize'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='relation' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectByWidthHeightRatio'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='thresh' declared_type='l_float32' type='f'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSelectWithIndicator'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='na' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='pchanged' declared_type='l_int32*' type='^i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSizeRange'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='pminw' declared_type='l_int32*' type='^i'/>
<arg name='pminh' declared_type='l_int32*' type='^i'/>
<arg name='pmaxw' declared_type='l_int32*' type='^i'/>
<arg name='pmaxh' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaSort'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='sorttype' declared_type='l_int32' type='i'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSort2dByIndex'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='naa' declared_type='NUMAA*' type='^{Numaa=ii^^{Numa}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaSortByIndex'>
<arg name='pixas' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='naindex' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaSplitPix'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='nx' declared_type='l_int32' type='i'/>
<arg name='ny' declared_type='l_int32' type='i'/>
<arg name='borderwidth' declared_type='l_int32' type='i'/>
<arg name='bordercolor' declared_type='l_uint32' type='I'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteCompressedToPS'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='level' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteFiles'>
<arg name='rootname' const='true' declared_type='char*' type='*'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaAddBox'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaAddPixa'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaCreateFromPixa'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaDestroy'>
<arg name='ppixaa' declared_type='PIXAA**' type='^^{Pixaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaaDisplay'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaaDisplayByPixa'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='xspace' declared_type='l_int32' type='i'/>
<arg name='yspace' declared_type='l_int32' type='i'/>
<arg name='maxw' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaaDisplayTiledAndScaled'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='tilewidth' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<arg name='background' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaExtendArray'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaFlattenToPixa'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaGetBoxa'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixaaGetCount'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaGetPixa'>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
</function>
<function name='pixaaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
</function>
<function name='pixaaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixaa' declared_type='PIXAA*' type='^{Pixaa=ii^^{Pixa}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccAdd'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccCreate'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='negflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
</function>
<function name='pixaccCreateWithPix'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='negflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
</function>
<function name='pixaccDestroy'>
<arg name='ppixacc' declared_type='PIXACC**' type='^^{Pixacc}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixaccFinal'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaccGetOffset'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccGetPix'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixaccMultConst'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccMultConstAccumulate'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixaccSubtract'>
<arg name='pixacc' declared_type='PIXACC*' type='^{Pixacc=iii^{Pix}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddBox'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddPix'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompAddPixcomp'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='pixc' declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromFiles'>
<arg name='dirname' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromPixa'>
<arg name='pixa' declared_type='PIXA*' type='^{Pixa=iiI^^{Pix}^{Boxa}}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateFromSA'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompCreateInitialized'>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompDestroy'>
<arg name='ppixac' declared_type='PIXAC**' type='^^{PixaComp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixacompDisplayTiledAndScaled'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='outdepth' declared_type='l_int32' type='i'/>
<arg name='tilewidth' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<arg name='background' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='border' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixacompExtendArray'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetBox'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='pixacompGetBoxGeometry'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetBoxa'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='accesstype' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='pixacompGetBoxaCount'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetCount'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetPix'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='pixacompGetPixDimensions'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pd' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompGetPixcomp'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixacompRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
</function>
<function name='pixacompReplacePix'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompReplacePixcomp'>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pixc' declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixacompWriteStreamInfo'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixac' declared_type='PIXAC*' type='^{PixaComp=ii^^{PixComp}^{Boxa}}'/>
<arg name='text' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddBlackOrWhite'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddNearestColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapAddNewColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapClear'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapColorToGray'>
<arg name='cmaps' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rwt' declared_type='l_float32' type='f'/>
<arg name='gwt' declared_type='l_float32' type='f'/>
<arg name='bwt' declared_type='l_float32' type='f'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapContrastTRC'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='factor' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertHSVToRGB'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertRGBToHSV'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertRGBToYUV'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapConvertToHex'>
<arg name='data' declared_type='l_uint8*' type='*'/>
<arg name='nbytes' declared_type='l_int32' type='i'/>
<arg name='ncolors' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='pixcmapConvertYUVToRGB'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapCopy'>
<arg name='cmaps' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCountGrayColors'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='pngray' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapCreate'>
<arg name='depth' declared_type='l_int32' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCreateLinear'>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='nlevels' declared_type='l_int32' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapCreateRandom'>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='hasblack' declared_type='l_int32' type='i'/>
<arg name='haswhite' declared_type='l_int32' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapDeserializeFromMemory'>
<arg name='data' declared_type='l_uint8*' type='*'/>
<arg name='ncolors' declared_type='l_int32' type='i'/>
<arg name='nbytes' declared_type='l_int32' type='i'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapDestroy'>
<arg name='pcmap' declared_type='PIXCMAP**' type='^^{PixColormap}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixcmapGammaTRC'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='gamma' declared_type='l_float32' type='f'/>
<arg name='minval' declared_type='l_int32' type='i'/>
<arg name='maxval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetColor32'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pval32' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetComponentRange'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='color' declared_type='l_int32' type='i'/>
<arg name='pminval' declared_type='l_int32*' type='^i'/>
<arg name='pmaxval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetCount'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetDepth'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetExtremeValue'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='prval' declared_type='l_int32*' type='^i'/>
<arg name='pgval' declared_type='l_int32*' type='^i'/>
<arg name='pbval' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetFreeCount'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetIndex'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetMinDepth'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='pmindepth' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetNearestGrayIndex'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='val' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetNearestIndex'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGetRankIntensity'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rankval' declared_type='l_float32' type='f'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapGrayToColor'>
<arg name='color' declared_type='l_uint32' type='I'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapHasColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='pcolor' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
</function>
<function name='pixcmapResetColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapSerializeToMemory'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='cpc' declared_type='l_int32' type='i'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapSetBlackAndWhite'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='setblack' declared_type='l_int32' type='i'/>
<arg name='setwhite' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapShiftIntensity'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='fraction' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapToArrays'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='prmap' declared_type='l_int32**' type='^^i'/>
<arg name='pgmap' declared_type='l_int32**' type='^^i'/>
<arg name='pbmap' declared_type='l_int32**' type='^^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapToOctcubeLUT'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='metric' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='pixcmapToRGBTable'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='ptab' declared_type='l_uint32**' type='^^I'/>
<arg name='pncolors' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapUsableColor'>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='pusable' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcmapWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='cmap' declared_type='PIXCMAP*' type='^{PixColormap=^viii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompCreateFromFile'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompCreateFromPix'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='comptype' declared_type='l_int32' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompCreateFromString'>
<arg name='data' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
</function>
<function name='pixcompDestroy'>
<arg name='ppixc' declared_type='PIXC**' type='^^{PixComp}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pixcompDetermineFormat'>
<arg name='comptype' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='cmapflag' declared_type='l_int32' type='i'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompGetDimensions'>
<arg name='pixc' declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pd' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixcompWriteStreamInfo'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pixc' declared_type='PIXC*' type='^{PixComp=iiiiii*i*I}'/>
<arg name='text' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixelFractionalShift'>
<arg name='rval' declared_type='l_int32' type='i'/>
<arg name='gval' declared_type='l_int32' type='i'/>
<arg name='bval' declared_type='l_int32' type='i'/>
<arg name='fraction' declared_type='l_float32' type='f'/>
<arg name='ppixel' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pixelLinearMapToTargetColor'>
<arg name='scolor' declared_type='l_uint32' type='I'/>
<arg name='srcmap' declared_type='l_uint32' type='I'/>
<arg name='dstmap' declared_type='l_uint32' type='I'/>
<arg name='pdcolor' declared_type='l_uint32*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsCreate'>
<arg name='minsize' declared_type='size_t' type='L'/>
<arg name='smallest' declared_type='size_t' type='L'/>
<arg name='numalloc' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='logfile' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsCustomAlloc'>
<arg name='nbytes' declared_type='size_t' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='pmsCustomDealloc'>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='pmsDestroy'>
<retval declared_type='void' type='v'/>
</function>
<function name='pmsGetAlloc'>
<arg name='nbytes' declared_type='size_t' type='L'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='pmsGetLevelForAlloc'>
<arg name='nbytes' declared_type='size_t' type='L'/>
<arg name='plevel' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsGetLevelForDealloc'>
<arg name='data' declared_type='void*' type='^v'/>
<arg name='plevel' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='pmsLogInfo'>
<retval declared_type='void' type='v'/>
</function>
<function name='projectiveXformPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_float32*' type='^f'/>
<arg name='pyp' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='projectiveXformSampledPt'>
<arg name='vc' declared_type='l_float32*' type='^f'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pxp' declared_type='l_int32*' type='^i'/>
<arg name='pyp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaAddPt'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='y' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaAffineTransform'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='mat' declared_type='l_float32*' type='^f'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaChangeRefcount'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaClone'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaContainsPt'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaConvertToBoxa'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ncorners' declared_type='l_int32' type='i'/>
<retval declared_type='BOXA*' type='^{Boxa=iiI^^{Box}}'/>
</function>
<function name='ptaCopy'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaCreateFromNuma'>
<arg name='nax' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<arg name='nay' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaCyclicPerm'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='xs' declared_type='l_int32' type='i'/>
<arg name='ys' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaDestroy'>
<arg name='ppta' declared_type='PTA**' type='^^{Pta}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptaEmpty'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaExtendArrays'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetArrays'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pnax' declared_type='NUMA**' type='^^{Numa}'/>
<arg name='pnay' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetBoundaryPixels'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaGetBoundingRegion'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='BOX*' type='^{Box=iiiiI}'/>
</function>
<function name='ptaGetCount'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetCubicLSF'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pa' declared_type='l_float32*' type='^f'/>
<arg name='pb' declared_type='l_float32*' type='^f'/>
<arg name='pc' declared_type='l_float32*' type='^f'/>
<arg name='pd' declared_type='l_float32*' type='^f'/>
<arg name='pnafit' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetIPt'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_int32*' type='^i'/>
<arg name='py' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetInsideBox'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaGetLinearLSF'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pa' declared_type='l_float32*' type='^f'/>
<arg name='pb' declared_type='l_float32*' type='^f'/>
<arg name='pnafit' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetPixelsFromPix'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='box' declared_type='BOX*' type='^{Box=iiiiI}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaGetPt'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_float32*' type='^f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetQuadraticLSF'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pa' declared_type='l_float32*' type='^f'/>
<arg name='pb' declared_type='l_float32*' type='^f'/>
<arg name='pc' declared_type='l_float32*' type='^f'/>
<arg name='pnafit' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetQuarticLSF'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pa' declared_type='l_float32*' type='^f'/>
<arg name='pb' declared_type='l_float32*' type='^f'/>
<arg name='pc' declared_type='l_float32*' type='^f'/>
<arg name='pd' declared_type='l_float32*' type='^f'/>
<arg name='pe' declared_type='l_float32*' type='^f'/>
<arg name='pnafit' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetRange'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pminx' declared_type='l_float32*' type='^f'/>
<arg name='pmaxx' declared_type='l_float32*' type='^f'/>
<arg name='pminy' declared_type='l_float32*' type='^f'/>
<arg name='pmaxy' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaGetRefcount'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaJoin'>
<arg name='ptad' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='istart' declared_type='l_int32' type='i'/>
<arg name='iend' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaRemoveDuplicates'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='factor' declared_type='l_uint32' type='I'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaReverse'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaRotate'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='xc' declared_type='l_float32' type='f'/>
<arg name='yc' declared_type='l_float32' type='f'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaScale'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaSetPt'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_float32' type='f'/>
<arg name='y' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaSort'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='sorttype' declared_type='l_int32' type='i'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<arg name='pnaindex' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaSubsample'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='subfactor' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaTestIntersection'>
<arg name='pta1' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='pta2' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaTransform'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='shiftx' declared_type='l_int32' type='i'/>
<arg name='shifty' declared_type='l_int32' type='i'/>
<arg name='scalex' declared_type='l_float32' type='f'/>
<arg name='scaley' declared_type='l_float32' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaTranslate'>
<arg name='ptas' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='transx' declared_type='l_float32' type='f'/>
<arg name='transy' declared_type='l_float32' type='f'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaAddPta'>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaDestroy'>
<arg name='pptaa' declared_type='PTAA**' type='^^{Ptaa}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptaaExtendArray'>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetBoundaryPixels'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<arg name='pboxa' declared_type='BOXA**' type='^^{Boxa}'/>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaGetCount'>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetPt'>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='ipta' declared_type='l_int32' type='i'/>
<arg name='jpt' declared_type='l_int32' type='i'/>
<arg name='px' declared_type='l_float32*' type='^f'/>
<arg name='py' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaGetPta'>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='PTA*' type='^{Pta=iii^f^f}'/>
</function>
<function name='ptaaRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaRemoveShortLines'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptaas' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='fract' declared_type='l_float32' type='f'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaSortByIndex'>
<arg name='ptaas' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='naindex' declared_type='NUMA*' type='^{Numa=iiiff^f}'/>
<retval declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
</function>
<function name='ptaaWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptaaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='ptaa' declared_type='PTAA*' type='^{Ptaa=ii^^{Pta}}'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraAdd'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='item' declared_type='void*' type='^v'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraCompactArray'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraConcatenatePdf'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraConcatenatePdfToData'>
<arg name='pa_data' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraDestroy'>
<arg name='ppa' declared_type='L_PTRA**' type='^^{L_Ptra}'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<arg name='warnflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptraExtendArray'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetActualCount'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetHandle'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraGetMaxIndex'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='pmaxindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraGetPtrToItem'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraInsert'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='item' declared_type='void*' type='^v'/>
<arg name='shiftflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraJoin'>
<arg name='pa1' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='pa2' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraRemove'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='flag' declared_type='l_int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraRemoveLast'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraReplace'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='item' declared_type='void*' type='^v'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ptraReverse'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraSwap'>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<arg name='index1' declared_type='l_int32' type='i'/>
<arg name='index2' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
</function>
<function name='ptraaDestroy'>
<arg name='ppaa' declared_type='L_PTRAA**' type='^^{L_Ptraa}'/>
<arg name='freeflag' declared_type='l_int32' type='i'/>
<arg name='warnflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ptraaFlattenToPtra'>
<arg name='paa' declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraaGetPtra'>
<arg name='paa' declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='accessflag' declared_type='l_int32' type='i'/>
<retval declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
</function>
<function name='ptraaGetSize'>
<arg name='paa' declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg name='psize' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='ptraaInsertPtra'>
<arg name='paa' declared_type='L_PTRAA*' type='^{L_Ptraa=i^^{L_Ptra}}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='pa' declared_type='L_PTRA*' type='^{L_Ptra=iii^^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeGetChildren'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval00' declared_type='l_float32*' type='^f'/>
<arg name='pval10' declared_type='l_float32*' type='^f'/>
<arg name='pval01' declared_type='l_float32*' type='^f'/>
<arg name='pval11' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeGetParent'>
<arg name='fpixa' declared_type='FPIXA*' type='^{FPixa=iiI^^{FPix}}'/>
<arg name='level' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='pval' declared_type='l_float32*' type='^f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='quadtreeMaxLevels'>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='rasteropHipLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='pixh' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='y' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='shift' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='dpixw' declared_type='l_int32' type='i'/>
<arg name='dpixh' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='dwpl' declared_type='l_int32' type='i'/>
<arg name='dx' declared_type='l_int32' type='i'/>
<arg name='dy' declared_type='l_int32' type='i'/>
<arg name='dw' declared_type='l_int32' type='i'/>
<arg name='dh' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='spixw' declared_type='l_int32' type='i'/>
<arg name='spixh' declared_type='l_int32' type='i'/>
<arg name='swpl' declared_type='l_int32' type='i'/>
<arg name='sx' declared_type='l_int32' type='i'/>
<arg name='sy' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropUniLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='dpixw' declared_type='l_int32' type='i'/>
<arg name='dpixh' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='dwpl' declared_type='l_int32' type='i'/>
<arg name='dx' declared_type='l_int32' type='i'/>
<arg name='dy' declared_type='l_int32' type='i'/>
<arg name='dw' declared_type='l_int32' type='i'/>
<arg name='dh' declared_type='l_int32' type='i'/>
<arg name='op' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rasteropVipLow'>
<arg name='data' declared_type='l_uint32*' type='^I'/>
<arg name='pixw' declared_type='l_int32' type='i'/>
<arg name='pixh' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='wpl' declared_type='l_int32' type='i'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='shift' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='readHeaderJpeg'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pycck' declared_type='l_int32*' type='^i'/>
<arg name='pcmyk' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderMemJpeg'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='pw' declared_type='l_int32*' type='^i'/>
<arg name='ph' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pycck' declared_type='l_int32*' type='^i'/>
<arg name='pcmyk' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderMemTiff'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pres' declared_type='l_int32*' type='^i'/>
<arg name='pcmap' declared_type='l_int32*' type='^i'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderPng'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderPnm'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='ppix' declared_type='PIX**' type='^^{Pix}'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pdepth' declared_type='l_int32*' type='^i'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderSpix'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderTiff'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='pres' declared_type='l_int32*' type='^i'/>
<arg name='pcmap' declared_type='l_int32*' type='^i'/>
<arg name='pformat' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='readHeaderWebP'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='reallocNew'>
<arg name='pindata' declared_type='void**' type='^^v'/>
<arg name='oldsize' declared_type='l_int32' type='i'/>
<arg name='newsize' declared_type='l_int32' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='reduceBinary2Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='reduceRankBinary2Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_uint8*' type='*'/>
<arg name='level' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='regTestCheckFile'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg name='localname' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCleanup'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCompareFiles'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg name='index1' declared_type='l_int32' type='i'/>
<arg name='index2' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestComparePix'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestCompareSimilarPix'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg name='pix1' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pix2' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='mindiff' declared_type='l_int32' type='i'/>
<arg name='maxfract' declared_type='l_float32' type='f'/>
<arg name='printstats' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestSetup'>
<arg name='argc' declared_type='l_int32' type='i'/>
<arg name='argv' declared_type='char**' type='^*'/>
<arg name='prp' declared_type='L_REGPARAMS**' type='^^{L_RegParams}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='regTestWritePixAndCheck'>
<arg name='rp' declared_type='L_REGPARAMS*' type='^{L_RegParams=^{__sFILE}**iiii^v}'/>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='format' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='resetMorphBoundaryCondition'>
<arg name='bc' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='returnErrorFloat'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='fval' declared_type='l_float32' type='f'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='returnErrorInt'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='ival' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='returnErrorPtr'>
<arg name='msg' const='true' declared_type='char*' type='*'/>
<arg name='procname' const='true' declared_type='char*' type='*'/>
<arg name='pval' declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='rotate90Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorCornerLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorFastLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMColorLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='colorval' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMGrayCornerLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='rotateAMGrayLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='angle' declared_type='l_float32' type='f'/>
<arg name='grayval' declared_type='l_uint8' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='runlengthMembershipOnLine'>
<arg name='buffer' declared_type='l_int32*' type='^i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='start' declared_type='l_int32*' type='^i'/>
<arg name='end' declared_type='l_int32*' type='^i'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConcatenatePdf'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConcatenatePdfToData'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConvertFilesToPdf'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='saConvertFilesToPdfData'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='scalefactor' declared_type='l_float32' type='f'/>
<arg name='quality' declared_type='l_int32' type='i'/>
<arg name='title' const='true' declared_type='char*' type='*'/>
<arg name='pdata' declared_type='l_uint8**' type='^*'/>
<arg name='pnbytes' declared_type='size_t*' type='^I'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAddString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='string' declared_type='char*' type='*'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAppend'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayAppendRange'>
<arg name='sa1' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='sa2' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='start' declared_type='l_int32' type='i'/>
<arg name='end' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayChangeRefcount'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='delta' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayClear'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayClone'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayConcatenate'>
<arg name='sa1' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='sa2' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertFilesFittedToPS'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='xpts' declared_type='l_float32' type='f'/>
<arg name='ypts' declared_type='l_float32' type='f'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertFilesToPS'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayConvertWordsToLines'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='linesize' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCopy'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateInitialized'>
<arg name='n' declared_type='l_int32' type='i'/>
<arg name='initstr' declared_type='char*' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateLinesFromString'>
<arg name='string' declared_type='char*' type='*'/>
<arg name='blankflag' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayCreateWordsFromString'>
<arg name='string' const='true' declared_type='char*' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayDestroy'>
<arg name='psa' declared_type='SARRAY**' type='^^{Sarray}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sarrayExtendArray'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetArray'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='pnalloc' declared_type='l_int32*' type='^i'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<retval declared_type='char**' type='^*'/>
</function>
<function name='sarrayGetCount'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetRefcount'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayGetString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayPadToSameSize'>
<arg name='sa1' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='sa2' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='padstring' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayParseRange'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='start' declared_type='l_int32' type='i'/>
<arg name='pactualstart' declared_type='l_int32*' type='^i'/>
<arg name='pend' declared_type='l_int32*' type='^i'/>
<arg name='pnewstart' declared_type='l_int32*' type='^i'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='loc' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayRead'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarrayRemoveString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayReplaceString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='index' declared_type='l_int32' type='i'/>
<arg name='newstr' declared_type='char*' type='*'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarraySelectByRange'>
<arg name='sain' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='last' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySelectBySubstring'>
<arg name='sain' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySort'>
<arg name='saout' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='sain' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='sortorder' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sarraySplitString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='str' const='true' declared_type='char*' type='*'/>
<arg name='separators' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayToString'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='addnlflag' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayToStringRange'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='first' declared_type='l_int32' type='i'/>
<arg name='nstrings' declared_type='l_int32' type='i'/>
<arg name='addnlflag' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='sarrayWrite'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sarrayWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleAreaMapLow2'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleBinaryLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleBySamplingLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleColor2xLILineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='lines' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColor2xLILow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColorAreaMapLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleColorLILow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray2xLILineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='lines' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray2xLILow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray4xLILineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='lines' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='lastlineflag' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGray4xLILow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGrayAreaMapLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleGrayLILow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleMipmapLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas1' declared_type='l_uint32*' type='^I'/>
<arg name='wpls1' declared_type='l_int32' type='i'/>
<arg name='datas2' declared_type='l_uint32*' type='^I'/>
<arg name='wpls2' declared_type='l_int32' type='i'/>
<arg name='red' declared_type='l_float32' type='f'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleRGBToGray2Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='rwt' declared_type='l_float32' type='f'/>
<arg name='gwt' declared_type='l_float32' type='f'/>
<arg name='bwt' declared_type='l_float32' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleSmoothLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='ws' declared_type='l_int32' type='i'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='size' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='scaleToGray16Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray2Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='sumtab' declared_type='l_uint32*' type='^I'/>
<arg name='valtab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray3Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='sumtab' declared_type='l_uint32*' type='^I'/>
<arg name='valtab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray4Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='sumtab' declared_type='l_uint32*' type='^I'/>
<arg name='valtab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray6Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<arg name='valtab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='scaleToGray8Low'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wd' declared_type='l_int32' type='i'/>
<arg name='hd' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab8' declared_type='l_int32*' type='^i'/>
<arg name='valtab' declared_type='l_uint8*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillBinaryLow'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='hs' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='datam' declared_type='l_uint32*' type='^I'/>
<arg name='hm' declared_type='l_int32' type='i'/>
<arg name='wplm' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayInvLow'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='datam' declared_type='l_uint32*' type='^I'/>
<arg name='wplm' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayInvLowSimple'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='datam' declared_type='l_uint32*' type='^I'/>
<arg name='wplm' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayLow'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='datam' declared_type='l_uint32*' type='^I'/>
<arg name='wplm' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedfillGrayLowSimple'>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='datam' declared_type='l_uint32*' type='^I'/>
<arg name='wplm' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='seedspreadLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datat' declared_type='l_uint32*' type='^I'/>
<arg name='wplt' declared_type='l_int32' type='i'/>
<arg name='connectivity' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selCopy'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreate'>
<arg name='height' declared_type='l_int32' type='i'/>
<arg name='width' declared_type='l_int32' type='i'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateBrick'>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateComb'>
<arg name='factor1' declared_type='l_int32' type='i'/>
<arg name='factor2' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromColorPix'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='selname' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromPix'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromPta'>
<arg name='pta' declared_type='PTA*' type='^{Pta=iii^f^f}'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selCreateFromString'>
<arg name='text' const='true' declared_type='char*' type='*'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selDestroy'>
<arg name='psel' declared_type='SEL**' type='^^:'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selDisplayInPix'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='gthick' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='selFindMaxTranslations'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='pxp' declared_type='l_int32*' type='^i'/>
<arg name='pyp' declared_type='l_int32*' type='^i'/>
<arg name='pxn' declared_type='l_int32*' type='^i'/>
<arg name='pyn' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetElement'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetName'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selGetParameters'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='psy' declared_type='l_int32*' type='^i'/>
<arg name='psx' declared_type='l_int32*' type='^i'/>
<arg name='pcy' declared_type='l_int32*' type='^i'/>
<arg name='pcx' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selGetTypeAtOrigin'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selPrintToString'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selRead'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selReadFromColorImage'>
<arg name='pathname' const='true' declared_type='char*' type='*'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selRotateOrth'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='quads' declared_type='l_int32' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selSetElement'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='row' declared_type='l_int32' type='i'/>
<arg name='col' declared_type='l_int32' type='i'/>
<arg name='type' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selSetName'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selSetOrigin'>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='cy' declared_type='l_int32' type='i'/>
<arg name='cx' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selWrite'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaAddBasic'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddCrossJunctions'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='hlsize' declared_type='l_float32' type='f'/>
<arg name='mdist' declared_type='l_float32' type='f'/>
<arg name='norient' declared_type='l_int32' type='i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddDwaCombs'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddDwaLinear'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddHitMiss'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaAddSel'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='sel' declared_type='SEL*' type='^:'/>
<arg name='selname' const='true' declared_type='char*' type='*'/>
<arg name='copyflag' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaAddTJunctions'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='hlsize' declared_type='l_float32' type='f'/>
<arg name='mdist' declared_type='l_float32' type='f'/>
<arg name='norient' declared_type='l_int32' type='i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaCreate'>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaCreateFromFile'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaDestroy'>
<arg name='psela' declared_type='SELA**' type='^^{Sela}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='selaDisplayInPix'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='gthick' declared_type='l_int32' type='i'/>
<arg name='spacing' declared_type='l_int32' type='i'/>
<arg name='ncols' declared_type='l_int32' type='i'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='selaExtendArray'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaFindSelByName'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='name' const='true' declared_type='char*' type='*'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<arg name='psel' declared_type='SEL**' type='^^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaGetBrickName'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='hsize' declared_type='l_int32' type='i'/>
<arg name='vsize' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selaGetCombName'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='selaGetCount'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaGetSel'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<arg name='i' declared_type='l_int32' type='i'/>
<retval declared_type='SEL*' type='^:'/>
</function>
<function name='selaGetSelnames'>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='selaRead'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaReadStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
</function>
<function name='selaWrite'>
<arg name='fname' const='true' declared_type='char*' type='*'/>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selaWriteStream'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='sela' declared_type='SELA*' type='^{Sela=ii^^{Sel}}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectComposableSels'>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='direction' declared_type='l_int32' type='i'/>
<arg name='psel1' declared_type='SEL**' type='^^:'/>
<arg name='psel2' declared_type='SEL**' type='^^:'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectComposableSizes'>
<arg name='size' declared_type='l_int32' type='i'/>
<arg name='pfactor1' declared_type='l_int32*' type='^i'/>
<arg name='pfactor2' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='selectDefaultPdfEncoding'>
<arg name='pix' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='setPixMemoryManager'>
<arg name='allocator' function_pointer='true' declared_type='void *(*)(size_t)' type='^?'>
<arg declared_type='size_t' type='L'/>
<retval declared_type='void*' type='^v'/>
</arg>
<arg name='deallocator' function_pointer='true' declared_type='void (*)(void *)' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='setPixelLow'>
<arg name='line' declared_type='l_uint32*' type='^I'/>
<arg name='x' declared_type='l_int32' type='i'/>
<arg name='depth' declared_type='l_int32' type='i'/>
<arg name='val' declared_type='l_uint32' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_loc_code'>
<arg name='loc_code' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_subloc_code'>
<arg name='loc_code' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='set_global_subsubloc_code'>
<arg name='loc_code' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='shiftDataHorizontalLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='shift' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='signal_exit'>
<arg name='signal_code' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sort_floats' inline='true'>
<arg name='arg1' const='true' declared_type='void*' type='^v'/>
<arg name='arg2' const='true' declared_type='void*' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='splitPathAtDirectory'>
<arg name='pathname' const='true' declared_type='char*' type='*'/>
<arg name='pdir' declared_type='char**' type='^*'/>
<arg name='ptail' declared_type='char**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='splitPathAtExtension'>
<arg name='pathname' const='true' declared_type='char*' type='*'/>
<arg name='pbasename' declared_type='char**' type='^*'/>
<arg name='pextension' declared_type='char**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='splitStringToParagraphs'>
<arg name='textstr' declared_type='char*' type='*'/>
<arg name='splitflag' declared_type='l_int32' type='i'/>
<retval declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
</function>
<function name='sreadHeaderPng'>
<arg name='data' const='true' declared_type='l_uint8*' type='*'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sreadHeaderPnm'>
<arg name='cdata' const='true' declared_type='l_uint8*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pdepth' declared_type='l_int32*' type='^i'/>
<arg name='ptype' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sreadHeaderSpix'>
<arg name='data' const='true' declared_type='l_uint32*' type='^I'/>
<arg name='pwidth' declared_type='l_int32*' type='^i'/>
<arg name='pheight' declared_type='l_int32*' type='^i'/>
<arg name='pbps' declared_type='l_int32*' type='^i'/>
<arg name='pspp' declared_type='l_int32*' type='^i'/>
<arg name='piscmap' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='startTimer'>
<retval declared_type='void' type='v'/>
</function>
<function name='startTimerNested'>
<retval declared_type='L_TIMER' type='^v'/>
</function>
<function name='stopTimer'>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='stopTimerNested'>
<arg name='rusage_start' declared_type='L_TIMER' type='^v'/>
<retval declared_type='l_float32' type='f'/>
</function>
<function name='stringCat'>
<arg name='dest' declared_type='char*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<arg name='src' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringCompareLexical'>
<arg name='str1' const='true' declared_type='char*' type='*'/>
<arg name='str2' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringCopy'>
<arg name='dest' declared_type='char*' type='*'/>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='n' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringFindSubstr'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='sub' const='true' declared_type='char*' type='*'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringJoin'>
<arg name='src1' const='true' declared_type='char*' type='*'/>
<arg name='src2' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringLength'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='size' declared_type='size_t' type='L'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringNew'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringRemoveChars'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='remchars' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReplace'>
<arg name='pdest' declared_type='char**' type='^*'/>
<arg name='src' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='stringReplaceEachSubstr'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='sub1' const='true' declared_type='char*' type='*'/>
<arg name='sub2' const='true' declared_type='char*' type='*'/>
<arg name='pcount' declared_type='l_int32*' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReplaceSubstr'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<arg name='sub1' const='true' declared_type='char*' type='*'/>
<arg name='sub2' const='true' declared_type='char*' type='*'/>
<arg name='pfound' declared_type='l_int32*' type='^i'/>
<arg name='ploc' declared_type='l_int32*' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringReverse'>
<arg name='src' const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='stringSplitOnToken'>
<arg name='cstr' declared_type='char*' type='*'/>
<arg name='seps' const='true' declared_type='char*' type='*'/>
<arg name='phead' declared_type='char**' type='^*'/>
<arg name='ptail' declared_type='char**' type='^*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='strtokSafe'>
<arg name='cstr' declared_type='char*' type='*'/>
<arg name='seps' const='true' declared_type='char*' type='*'/>
<arg name='psaveptr' declared_type='char**' type='^*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='subtractGrayLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sudokuCreate'>
<arg name='array' declared_type='l_int32*' type='^i'/>
<retval declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
</function>
<function name='sudokuDestroy'>
<arg name='psud' declared_type='L_SUDOKU**' type='^^{L_Sudoku}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='sudokuGenerate'>
<arg name='array' declared_type='l_int32*' type='^i'/>
<arg name='seed' declared_type='l_int32' type='i'/>
<arg name='minelems' declared_type='l_int32' type='i'/>
<arg name='maxtries' declared_type='l_int32' type='i'/>
<retval declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
</function>
<function name='sudokuOutput'>
<arg name='sud' declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
<arg name='arraytype' declared_type='l_int32' type='i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sudokuReadFile'>
<arg name='filename' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='sudokuReadString'>
<arg name='str' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32*' type='^i'/>
</function>
<function name='sudokuSolve'>
<arg name='sud' declared_type='L_SUDOKU*' type='^{L_Sudoku=i^ii^i^iiii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='sudokuTestUniqueness'>
<arg name='array' declared_type='l_int32*' type='^i'/>
<arg name='punique' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='thresholdTo2bppLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdTo4bppLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='tab' declared_type='l_int32*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToBinaryLineLow'>
<arg name='lined' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='lines' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToBinaryLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='datas' declared_type='l_uint32*' type='^I'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpls' declared_type='l_int32' type='i'/>
<arg name='thresh' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='thresholdToValueLow'>
<arg name='datad' declared_type='l_uint32*' type='^I'/>
<arg name='w' declared_type='l_int32' type='i'/>
<arg name='h' declared_type='l_int32' type='i'/>
<arg name='d' declared_type='l_int32' type='i'/>
<arg name='wpld' declared_type='l_int32' type='i'/>
<arg name='threshval' declared_type='l_int32' type='i'/>
<arg name='setval' declared_type='l_int32' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='tiffGetCount'>
<arg name='fp' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg name='pn' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='writeImageCompressedToPSFile'>
<arg name='filein' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<arg name='res' declared_type='l_int32' type='i'/>
<arg name='pfirstfile' declared_type='l_int32*' type='^i'/>
<arg name='pindex' declared_type='l_int32*' type='^i'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='writeMultipageTiff'>
<arg name='dirin' const='true' declared_type='char*' type='*'/>
<arg name='substr' const='true' declared_type='char*' type='*'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='writeMultipageTiffSA'>
<arg name='sa' declared_type='SARRAY*' type='^{Sarray=iii^*}'/>
<arg name='fileout' const='true' declared_type='char*' type='*'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedApply'>
<arg name='wshed' declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedBasins'>
<arg name='wshed' declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<arg name='ppixa' declared_type='PIXA**' type='^^{Pixa}'/>
<arg name='pnalevels' declared_type='NUMA**' type='^^{Numa}'/>
<retval declared_type='l_int32' type='i'/>
</function>
<function name='wshedCreate'>
<arg name='pixs' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='pixm' declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
<arg name='mindepth' declared_type='l_int32' type='i'/>
<arg name='debugflag' declared_type='l_int32' type='i'/>
<retval declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
</function>
<function name='wshedDestroy'>
<arg name='pwshed' declared_type='L_WSHED**' type='^^{L_WShed}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='wshedRenderColors'>
<arg name='wshed' declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='wshedRenderFill'>
<arg name='wshed' declared_type='L_WSHED*' type='^{L_WShed=^{Pix}^{Pix}i^{Pix}^{Pix}^^v^^v^^v^^v^{Pixa}^{Pta}^{Numa}^{Numa}^{Numa}^{Numa}ii^i^^{Numa}ii}'/>
<retval declared_type='PIX*' type='^{Pix=IIIIIiii*^{PixColormap}^I}'/>
</function>
<function name='zlibCompress'>
<arg name='datain' declared_type='l_uint8*' type='*'/>
<arg name='nin' declared_type='size_t' type='L'/>
<arg name='pnout' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
<function name='zlibUncompress'>
<arg name='datain' declared_type='l_uint8*' type='*'/>
<arg name='nin' declared_type='size_t' type='L'/>
<arg name='pnout' declared_type='size_t*' type='^I'/>
<retval declared_type='l_uint8*' type='*'/>
</function>
</signatures>
